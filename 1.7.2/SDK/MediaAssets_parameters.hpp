#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MediaAssets

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MediaAssets_structs.hpp"


namespace SDK::Params
{

// Function MediaAssets.MediaOverlays.GetCaptions
// 0x0018 (0x0018 - 0x0000)
struct MediaOverlays_GetCaptions final
{
public:
	TArray<struct FMediaPlayerOverlay>            OutCaptions;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTimespan                              Time;                                              // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaOverlays_GetCaptions) == 0x000008, "Wrong alignment on MediaOverlays_GetCaptions");
static_assert(sizeof(MediaOverlays_GetCaptions) == 0x000018, "Wrong size on MediaOverlays_GetCaptions");
static_assert(offsetof(MediaOverlays_GetCaptions, OutCaptions) == 0x000000, "Member 'MediaOverlays_GetCaptions::OutCaptions' has a wrong offset!");
static_assert(offsetof(MediaOverlays_GetCaptions, Time) == 0x000010, "Member 'MediaOverlays_GetCaptions::Time' has a wrong offset!");

// Function MediaAssets.MediaOverlays.GetSubtitles
// 0x0018 (0x0018 - 0x0000)
struct MediaOverlays_GetSubtitles final
{
public:
	TArray<struct FMediaPlayerOverlay>            OutSubtitles;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTimespan                              Time;                                              // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaOverlays_GetSubtitles) == 0x000008, "Wrong alignment on MediaOverlays_GetSubtitles");
static_assert(sizeof(MediaOverlays_GetSubtitles) == 0x000018, "Wrong size on MediaOverlays_GetSubtitles");
static_assert(offsetof(MediaOverlays_GetSubtitles, OutSubtitles) == 0x000000, "Member 'MediaOverlays_GetSubtitles::OutSubtitles' has a wrong offset!");
static_assert(offsetof(MediaOverlays_GetSubtitles, Time) == 0x000010, "Member 'MediaOverlays_GetSubtitles::Time' has a wrong offset!");

// Function MediaAssets.MediaOverlays.GetTexts
// 0x0018 (0x0018 - 0x0000)
struct MediaOverlays_GetTexts final
{
public:
	TArray<struct FMediaPlayerOverlay>            OutTexts;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTimespan                              Time;                                              // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaOverlays_GetTexts) == 0x000008, "Wrong alignment on MediaOverlays_GetTexts");
static_assert(sizeof(MediaOverlays_GetTexts) == 0x000018, "Wrong size on MediaOverlays_GetTexts");
static_assert(offsetof(MediaOverlays_GetTexts, OutTexts) == 0x000000, "Member 'MediaOverlays_GetTexts::OutTexts' has a wrong offset!");
static_assert(offsetof(MediaOverlays_GetTexts, Time) == 0x000010, "Member 'MediaOverlays_GetTexts::Time' has a wrong offset!");

// Function MediaAssets.MediaPlayer.CanPlaySource
// 0x0010 (0x0010 - 0x0000)
struct MediaPlayer_CanPlaySource final
{
public:
	class UMediaSource*                           MediaSource;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MediaPlayer_CanPlaySource) == 0x000008, "Wrong alignment on MediaPlayer_CanPlaySource");
static_assert(sizeof(MediaPlayer_CanPlaySource) == 0x000010, "Wrong size on MediaPlayer_CanPlaySource");
static_assert(offsetof(MediaPlayer_CanPlaySource, MediaSource) == 0x000000, "Member 'MediaPlayer_CanPlaySource::MediaSource' has a wrong offset!");
static_assert(offsetof(MediaPlayer_CanPlaySource, ReturnValue) == 0x000008, "Member 'MediaPlayer_CanPlaySource::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.CanPlayUrl
// 0x0018 (0x0018 - 0x0000)
struct MediaPlayer_CanPlayUrl final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MediaPlayer_CanPlayUrl) == 0x000008, "Wrong alignment on MediaPlayer_CanPlayUrl");
static_assert(sizeof(MediaPlayer_CanPlayUrl) == 0x000018, "Wrong size on MediaPlayer_CanPlayUrl");
static_assert(offsetof(MediaPlayer_CanPlayUrl, URL) == 0x000000, "Member 'MediaPlayer_CanPlayUrl::URL' has a wrong offset!");
static_assert(offsetof(MediaPlayer_CanPlayUrl, ReturnValue) == 0x000010, "Member 'MediaPlayer_CanPlayUrl::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.GetForwardRates
// 0x0014 (0x0014 - 0x0000)
struct MediaPlayer_GetForwardRates final
{
public:
	bool                                          Unthinned;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatRange                            ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_GetForwardRates) == 0x000004, "Wrong alignment on MediaPlayer_GetForwardRates");
static_assert(sizeof(MediaPlayer_GetForwardRates) == 0x000014, "Wrong size on MediaPlayer_GetForwardRates");
static_assert(offsetof(MediaPlayer_GetForwardRates, Unthinned) == 0x000000, "Member 'MediaPlayer_GetForwardRates::Unthinned' has a wrong offset!");
static_assert(offsetof(MediaPlayer_GetForwardRates, ReturnValue) == 0x000004, "Member 'MediaPlayer_GetForwardRates::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.GetReverseRates
// 0x0014 (0x0014 - 0x0000)
struct MediaPlayer_GetReverseRates final
{
public:
	bool                                          Unthinned;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatRange                            ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_GetReverseRates) == 0x000004, "Wrong alignment on MediaPlayer_GetReverseRates");
static_assert(sizeof(MediaPlayer_GetReverseRates) == 0x000014, "Wrong size on MediaPlayer_GetReverseRates");
static_assert(offsetof(MediaPlayer_GetReverseRates, Unthinned) == 0x000000, "Member 'MediaPlayer_GetReverseRates::Unthinned' has a wrong offset!");
static_assert(offsetof(MediaPlayer_GetReverseRates, ReturnValue) == 0x000004, "Member 'MediaPlayer_GetReverseRates::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.Next
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_Next final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_Next) == 0x000001, "Wrong alignment on MediaPlayer_Next");
static_assert(sizeof(MediaPlayer_Next) == 0x000001, "Wrong size on MediaPlayer_Next");
static_assert(offsetof(MediaPlayer_Next, ReturnValue) == 0x000000, "Member 'MediaPlayer_Next::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.OpenFile
// 0x0018 (0x0018 - 0x0000)
struct MediaPlayer_OpenFile final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MediaPlayer_OpenFile) == 0x000008, "Wrong alignment on MediaPlayer_OpenFile");
static_assert(sizeof(MediaPlayer_OpenFile) == 0x000018, "Wrong size on MediaPlayer_OpenFile");
static_assert(offsetof(MediaPlayer_OpenFile, FilePath) == 0x000000, "Member 'MediaPlayer_OpenFile::FilePath' has a wrong offset!");
static_assert(offsetof(MediaPlayer_OpenFile, ReturnValue) == 0x000010, "Member 'MediaPlayer_OpenFile::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.OpenPlaylist
// 0x0010 (0x0010 - 0x0000)
struct MediaPlayer_OpenPlaylist final
{
public:
	class UMediaPlaylist*                         InPlaylist;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MediaPlayer_OpenPlaylist) == 0x000008, "Wrong alignment on MediaPlayer_OpenPlaylist");
static_assert(sizeof(MediaPlayer_OpenPlaylist) == 0x000010, "Wrong size on MediaPlayer_OpenPlaylist");
static_assert(offsetof(MediaPlayer_OpenPlaylist, InPlaylist) == 0x000000, "Member 'MediaPlayer_OpenPlaylist::InPlaylist' has a wrong offset!");
static_assert(offsetof(MediaPlayer_OpenPlaylist, ReturnValue) == 0x000008, "Member 'MediaPlayer_OpenPlaylist::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.OpenPlaylistIndex
// 0x0010 (0x0010 - 0x0000)
struct MediaPlayer_OpenPlaylistIndex final
{
public:
	class UMediaPlaylist*                         InPlaylist;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MediaPlayer_OpenPlaylistIndex) == 0x000008, "Wrong alignment on MediaPlayer_OpenPlaylistIndex");
static_assert(sizeof(MediaPlayer_OpenPlaylistIndex) == 0x000010, "Wrong size on MediaPlayer_OpenPlaylistIndex");
static_assert(offsetof(MediaPlayer_OpenPlaylistIndex, InPlaylist) == 0x000000, "Member 'MediaPlayer_OpenPlaylistIndex::InPlaylist' has a wrong offset!");
static_assert(offsetof(MediaPlayer_OpenPlaylistIndex, Index_0) == 0x000008, "Member 'MediaPlayer_OpenPlaylistIndex::Index_0' has a wrong offset!");
static_assert(offsetof(MediaPlayer_OpenPlaylistIndex, ReturnValue) == 0x00000C, "Member 'MediaPlayer_OpenPlaylistIndex::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.OpenSource
// 0x0010 (0x0010 - 0x0000)
struct MediaPlayer_OpenSource final
{
public:
	class UMediaSource*                           MediaSource;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MediaPlayer_OpenSource) == 0x000008, "Wrong alignment on MediaPlayer_OpenSource");
static_assert(sizeof(MediaPlayer_OpenSource) == 0x000010, "Wrong size on MediaPlayer_OpenSource");
static_assert(offsetof(MediaPlayer_OpenSource, MediaSource) == 0x000000, "Member 'MediaPlayer_OpenSource::MediaSource' has a wrong offset!");
static_assert(offsetof(MediaPlayer_OpenSource, ReturnValue) == 0x000008, "Member 'MediaPlayer_OpenSource::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.OpenUrl
// 0x0018 (0x0018 - 0x0000)
struct MediaPlayer_OpenUrl final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MediaPlayer_OpenUrl) == 0x000008, "Wrong alignment on MediaPlayer_OpenUrl");
static_assert(sizeof(MediaPlayer_OpenUrl) == 0x000018, "Wrong size on MediaPlayer_OpenUrl");
static_assert(offsetof(MediaPlayer_OpenUrl, URL) == 0x000000, "Member 'MediaPlayer_OpenUrl::URL' has a wrong offset!");
static_assert(offsetof(MediaPlayer_OpenUrl, ReturnValue) == 0x000010, "Member 'MediaPlayer_OpenUrl::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.Pause
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_Pause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_Pause) == 0x000001, "Wrong alignment on MediaPlayer_Pause");
static_assert(sizeof(MediaPlayer_Pause) == 0x000001, "Wrong size on MediaPlayer_Pause");
static_assert(offsetof(MediaPlayer_Pause, ReturnValue) == 0x000000, "Member 'MediaPlayer_Pause::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.Play
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_Play final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_Play) == 0x000001, "Wrong alignment on MediaPlayer_Play");
static_assert(sizeof(MediaPlayer_Play) == 0x000001, "Wrong size on MediaPlayer_Play");
static_assert(offsetof(MediaPlayer_Play, ReturnValue) == 0x000000, "Member 'MediaPlayer_Play::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.Previous
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_Previous final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_Previous) == 0x000001, "Wrong alignment on MediaPlayer_Previous");
static_assert(sizeof(MediaPlayer_Previous) == 0x000001, "Wrong size on MediaPlayer_Previous");
static_assert(offsetof(MediaPlayer_Previous, ReturnValue) == 0x000000, "Member 'MediaPlayer_Previous::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.Reopen
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_Reopen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_Reopen) == 0x000001, "Wrong alignment on MediaPlayer_Reopen");
static_assert(sizeof(MediaPlayer_Reopen) == 0x000001, "Wrong size on MediaPlayer_Reopen");
static_assert(offsetof(MediaPlayer_Reopen, ReturnValue) == 0x000000, "Member 'MediaPlayer_Reopen::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.Rewind
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_Rewind final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_Rewind) == 0x000001, "Wrong alignment on MediaPlayer_Rewind");
static_assert(sizeof(MediaPlayer_Rewind) == 0x000001, "Wrong size on MediaPlayer_Rewind");
static_assert(offsetof(MediaPlayer_Rewind, ReturnValue) == 0x000000, "Member 'MediaPlayer_Rewind::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.Seek
// 0x0010 (0x0010 - 0x0000)
struct MediaPlayer_Seek final
{
public:
	struct FTimespan                              Time;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MediaPlayer_Seek) == 0x000008, "Wrong alignment on MediaPlayer_Seek");
static_assert(sizeof(MediaPlayer_Seek) == 0x000010, "Wrong size on MediaPlayer_Seek");
static_assert(offsetof(MediaPlayer_Seek, Time) == 0x000000, "Member 'MediaPlayer_Seek::Time' has a wrong offset!");
static_assert(offsetof(MediaPlayer_Seek, ReturnValue) == 0x000008, "Member 'MediaPlayer_Seek::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.SelectTrack
// 0x000C (0x000C - 0x0000)
struct MediaPlayer_SelectTrack final
{
public:
	EMediaPlayerTrack                             TrackType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TrackIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MediaPlayer_SelectTrack) == 0x000004, "Wrong alignment on MediaPlayer_SelectTrack");
static_assert(sizeof(MediaPlayer_SelectTrack) == 0x00000C, "Wrong size on MediaPlayer_SelectTrack");
static_assert(offsetof(MediaPlayer_SelectTrack, TrackType) == 0x000000, "Member 'MediaPlayer_SelectTrack::TrackType' has a wrong offset!");
static_assert(offsetof(MediaPlayer_SelectTrack, TrackIndex) == 0x000004, "Member 'MediaPlayer_SelectTrack::TrackIndex' has a wrong offset!");
static_assert(offsetof(MediaPlayer_SelectTrack, ReturnValue) == 0x000008, "Member 'MediaPlayer_SelectTrack::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.SetDesiredPlayerName
// 0x0008 (0x0008 - 0x0000)
struct MediaPlayer_SetDesiredPlayerName final
{
public:
	class FName                                   PlayerName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_SetDesiredPlayerName) == 0x000004, "Wrong alignment on MediaPlayer_SetDesiredPlayerName");
static_assert(sizeof(MediaPlayer_SetDesiredPlayerName) == 0x000008, "Wrong size on MediaPlayer_SetDesiredPlayerName");
static_assert(offsetof(MediaPlayer_SetDesiredPlayerName, PlayerName) == 0x000000, "Member 'MediaPlayer_SetDesiredPlayerName::PlayerName' has a wrong offset!");

// Function MediaAssets.MediaPlayer.SetLooping
// 0x0002 (0x0002 - 0x0000)
struct MediaPlayer_SetLooping final
{
public:
	bool                                          Looping;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_SetLooping) == 0x000001, "Wrong alignment on MediaPlayer_SetLooping");
static_assert(sizeof(MediaPlayer_SetLooping) == 0x000002, "Wrong size on MediaPlayer_SetLooping");
static_assert(offsetof(MediaPlayer_SetLooping, Looping) == 0x000000, "Member 'MediaPlayer_SetLooping::Looping' has a wrong offset!");
static_assert(offsetof(MediaPlayer_SetLooping, ReturnValue) == 0x000001, "Member 'MediaPlayer_SetLooping::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.SetOverlays
// 0x0008 (0x0008 - 0x0000)
struct MediaPlayer_SetOverlays final
{
public:
	class UMediaOverlays*                         NewOverlays;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_SetOverlays) == 0x000008, "Wrong alignment on MediaPlayer_SetOverlays");
static_assert(sizeof(MediaPlayer_SetOverlays) == 0x000008, "Wrong size on MediaPlayer_SetOverlays");
static_assert(offsetof(MediaPlayer_SetOverlays, NewOverlays) == 0x000000, "Member 'MediaPlayer_SetOverlays::NewOverlays' has a wrong offset!");

// Function MediaAssets.MediaPlayer.SetRate
// 0x0008 (0x0008 - 0x0000)
struct MediaPlayer_SetRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MediaPlayer_SetRate) == 0x000004, "Wrong alignment on MediaPlayer_SetRate");
static_assert(sizeof(MediaPlayer_SetRate) == 0x000008, "Wrong size on MediaPlayer_SetRate");
static_assert(offsetof(MediaPlayer_SetRate, Rate) == 0x000000, "Member 'MediaPlayer_SetRate::Rate' has a wrong offset!");
static_assert(offsetof(MediaPlayer_SetRate, ReturnValue) == 0x000004, "Member 'MediaPlayer_SetRate::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.SetSoundWave
// 0x0008 (0x0008 - 0x0000)
struct MediaPlayer_SetSoundWave final
{
public:
	class UMediaSoundWave*                        NewSoundWave;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_SetSoundWave) == 0x000008, "Wrong alignment on MediaPlayer_SetSoundWave");
static_assert(sizeof(MediaPlayer_SetSoundWave) == 0x000008, "Wrong size on MediaPlayer_SetSoundWave");
static_assert(offsetof(MediaPlayer_SetSoundWave, NewSoundWave) == 0x000000, "Member 'MediaPlayer_SetSoundWave::NewSoundWave' has a wrong offset!");

// Function MediaAssets.MediaPlayer.SetVideoTexture
// 0x0008 (0x0008 - 0x0000)
struct MediaPlayer_SetVideoTexture final
{
public:
	class UMediaTexture*                          NewTexture;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_SetVideoTexture) == 0x000008, "Wrong alignment on MediaPlayer_SetVideoTexture");
static_assert(sizeof(MediaPlayer_SetVideoTexture) == 0x000008, "Wrong size on MediaPlayer_SetVideoTexture");
static_assert(offsetof(MediaPlayer_SetVideoTexture, NewTexture) == 0x000000, "Member 'MediaPlayer_SetVideoTexture::NewTexture' has a wrong offset!");

// Function MediaAssets.MediaPlayer.CanPause
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_CanPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_CanPause) == 0x000001, "Wrong alignment on MediaPlayer_CanPause");
static_assert(sizeof(MediaPlayer_CanPause) == 0x000001, "Wrong size on MediaPlayer_CanPause");
static_assert(offsetof(MediaPlayer_CanPause, ReturnValue) == 0x000000, "Member 'MediaPlayer_CanPause::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.GetDesiredPlayerName
// 0x0008 (0x0008 - 0x0000)
struct MediaPlayer_GetDesiredPlayerName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_GetDesiredPlayerName) == 0x000004, "Wrong alignment on MediaPlayer_GetDesiredPlayerName");
static_assert(sizeof(MediaPlayer_GetDesiredPlayerName) == 0x000008, "Wrong size on MediaPlayer_GetDesiredPlayerName");
static_assert(offsetof(MediaPlayer_GetDesiredPlayerName, ReturnValue) == 0x000000, "Member 'MediaPlayer_GetDesiredPlayerName::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.GetDuration
// 0x0008 (0x0008 - 0x0000)
struct MediaPlayer_GetDuration final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_GetDuration) == 0x000008, "Wrong alignment on MediaPlayer_GetDuration");
static_assert(sizeof(MediaPlayer_GetDuration) == 0x000008, "Wrong size on MediaPlayer_GetDuration");
static_assert(offsetof(MediaPlayer_GetDuration, ReturnValue) == 0x000000, "Member 'MediaPlayer_GetDuration::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.GetNumTracks
// 0x0008 (0x0008 - 0x0000)
struct MediaPlayer_GetNumTracks final
{
public:
	EMediaPlayerTrack                             TrackType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_GetNumTracks) == 0x000004, "Wrong alignment on MediaPlayer_GetNumTracks");
static_assert(sizeof(MediaPlayer_GetNumTracks) == 0x000008, "Wrong size on MediaPlayer_GetNumTracks");
static_assert(offsetof(MediaPlayer_GetNumTracks, TrackType) == 0x000000, "Member 'MediaPlayer_GetNumTracks::TrackType' has a wrong offset!");
static_assert(offsetof(MediaPlayer_GetNumTracks, ReturnValue) == 0x000004, "Member 'MediaPlayer_GetNumTracks::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.GetPlayerName
// 0x0008 (0x0008 - 0x0000)
struct MediaPlayer_GetPlayerName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_GetPlayerName) == 0x000004, "Wrong alignment on MediaPlayer_GetPlayerName");
static_assert(sizeof(MediaPlayer_GetPlayerName) == 0x000008, "Wrong size on MediaPlayer_GetPlayerName");
static_assert(offsetof(MediaPlayer_GetPlayerName, ReturnValue) == 0x000000, "Member 'MediaPlayer_GetPlayerName::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.GetRate
// 0x0004 (0x0004 - 0x0000)
struct MediaPlayer_GetRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_GetRate) == 0x000004, "Wrong alignment on MediaPlayer_GetRate");
static_assert(sizeof(MediaPlayer_GetRate) == 0x000004, "Wrong size on MediaPlayer_GetRate");
static_assert(offsetof(MediaPlayer_GetRate, ReturnValue) == 0x000000, "Member 'MediaPlayer_GetRate::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.GetSelectedTrack
// 0x0008 (0x0008 - 0x0000)
struct MediaPlayer_GetSelectedTrack final
{
public:
	EMediaPlayerTrack                             TrackType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_GetSelectedTrack) == 0x000004, "Wrong alignment on MediaPlayer_GetSelectedTrack");
static_assert(sizeof(MediaPlayer_GetSelectedTrack) == 0x000008, "Wrong size on MediaPlayer_GetSelectedTrack");
static_assert(offsetof(MediaPlayer_GetSelectedTrack, TrackType) == 0x000000, "Member 'MediaPlayer_GetSelectedTrack::TrackType' has a wrong offset!");
static_assert(offsetof(MediaPlayer_GetSelectedTrack, ReturnValue) == 0x000004, "Member 'MediaPlayer_GetSelectedTrack::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.GetTime
// 0x0008 (0x0008 - 0x0000)
struct MediaPlayer_GetTime final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_GetTime) == 0x000008, "Wrong alignment on MediaPlayer_GetTime");
static_assert(sizeof(MediaPlayer_GetTime) == 0x000008, "Wrong size on MediaPlayer_GetTime");
static_assert(offsetof(MediaPlayer_GetTime, ReturnValue) == 0x000000, "Member 'MediaPlayer_GetTime::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.GetTrackDisplayName
// 0x0020 (0x0020 - 0x0000)
struct MediaPlayer_GetTrackDisplayName final
{
public:
	EMediaPlayerTrack                             TrackType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TrackIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_GetTrackDisplayName) == 0x000008, "Wrong alignment on MediaPlayer_GetTrackDisplayName");
static_assert(sizeof(MediaPlayer_GetTrackDisplayName) == 0x000020, "Wrong size on MediaPlayer_GetTrackDisplayName");
static_assert(offsetof(MediaPlayer_GetTrackDisplayName, TrackType) == 0x000000, "Member 'MediaPlayer_GetTrackDisplayName::TrackType' has a wrong offset!");
static_assert(offsetof(MediaPlayer_GetTrackDisplayName, TrackIndex) == 0x000004, "Member 'MediaPlayer_GetTrackDisplayName::TrackIndex' has a wrong offset!");
static_assert(offsetof(MediaPlayer_GetTrackDisplayName, ReturnValue) == 0x000008, "Member 'MediaPlayer_GetTrackDisplayName::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.GetTrackLanguage
// 0x0018 (0x0018 - 0x0000)
struct MediaPlayer_GetTrackLanguage final
{
public:
	EMediaPlayerTrack                             TrackType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TrackIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_GetTrackLanguage) == 0x000008, "Wrong alignment on MediaPlayer_GetTrackLanguage");
static_assert(sizeof(MediaPlayer_GetTrackLanguage) == 0x000018, "Wrong size on MediaPlayer_GetTrackLanguage");
static_assert(offsetof(MediaPlayer_GetTrackLanguage, TrackType) == 0x000000, "Member 'MediaPlayer_GetTrackLanguage::TrackType' has a wrong offset!");
static_assert(offsetof(MediaPlayer_GetTrackLanguage, TrackIndex) == 0x000004, "Member 'MediaPlayer_GetTrackLanguage::TrackIndex' has a wrong offset!");
static_assert(offsetof(MediaPlayer_GetTrackLanguage, ReturnValue) == 0x000008, "Member 'MediaPlayer_GetTrackLanguage::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.GetUrl
// 0x0010 (0x0010 - 0x0000)
struct MediaPlayer_GetUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_GetUrl) == 0x000008, "Wrong alignment on MediaPlayer_GetUrl");
static_assert(sizeof(MediaPlayer_GetUrl) == 0x000010, "Wrong size on MediaPlayer_GetUrl");
static_assert(offsetof(MediaPlayer_GetUrl, ReturnValue) == 0x000000, "Member 'MediaPlayer_GetUrl::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.IsLooping
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_IsLooping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_IsLooping) == 0x000001, "Wrong alignment on MediaPlayer_IsLooping");
static_assert(sizeof(MediaPlayer_IsLooping) == 0x000001, "Wrong size on MediaPlayer_IsLooping");
static_assert(offsetof(MediaPlayer_IsLooping, ReturnValue) == 0x000000, "Member 'MediaPlayer_IsLooping::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_IsPaused) == 0x000001, "Wrong alignment on MediaPlayer_IsPaused");
static_assert(sizeof(MediaPlayer_IsPaused) == 0x000001, "Wrong size on MediaPlayer_IsPaused");
static_assert(offsetof(MediaPlayer_IsPaused, ReturnValue) == 0x000000, "Member 'MediaPlayer_IsPaused::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_IsPlaying) == 0x000001, "Wrong alignment on MediaPlayer_IsPlaying");
static_assert(sizeof(MediaPlayer_IsPlaying) == 0x000001, "Wrong size on MediaPlayer_IsPlaying");
static_assert(offsetof(MediaPlayer_IsPlaying, ReturnValue) == 0x000000, "Member 'MediaPlayer_IsPlaying::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.IsPreparing
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_IsPreparing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_IsPreparing) == 0x000001, "Wrong alignment on MediaPlayer_IsPreparing");
static_assert(sizeof(MediaPlayer_IsPreparing) == 0x000001, "Wrong size on MediaPlayer_IsPreparing");
static_assert(offsetof(MediaPlayer_IsPreparing, ReturnValue) == 0x000000, "Member 'MediaPlayer_IsPreparing::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.IsReady
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_IsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_IsReady) == 0x000001, "Wrong alignment on MediaPlayer_IsReady");
static_assert(sizeof(MediaPlayer_IsReady) == 0x000001, "Wrong size on MediaPlayer_IsReady");
static_assert(offsetof(MediaPlayer_IsReady, ReturnValue) == 0x000000, "Member 'MediaPlayer_IsReady::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.SupportsRate
// 0x0008 (0x0008 - 0x0000)
struct MediaPlayer_SupportsRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Unthinned;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MediaPlayer_SupportsRate) == 0x000004, "Wrong alignment on MediaPlayer_SupportsRate");
static_assert(sizeof(MediaPlayer_SupportsRate) == 0x000008, "Wrong size on MediaPlayer_SupportsRate");
static_assert(offsetof(MediaPlayer_SupportsRate, Rate) == 0x000000, "Member 'MediaPlayer_SupportsRate::Rate' has a wrong offset!");
static_assert(offsetof(MediaPlayer_SupportsRate, Unthinned) == 0x000004, "Member 'MediaPlayer_SupportsRate::Unthinned' has a wrong offset!");
static_assert(offsetof(MediaPlayer_SupportsRate, ReturnValue) == 0x000005, "Member 'MediaPlayer_SupportsRate::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.SupportsScrubbing
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_SupportsScrubbing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_SupportsScrubbing) == 0x000001, "Wrong alignment on MediaPlayer_SupportsScrubbing");
static_assert(sizeof(MediaPlayer_SupportsScrubbing) == 0x000001, "Wrong size on MediaPlayer_SupportsScrubbing");
static_assert(offsetof(MediaPlayer_SupportsScrubbing, ReturnValue) == 0x000000, "Member 'MediaPlayer_SupportsScrubbing::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.SupportsSeeking
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_SupportsSeeking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_SupportsSeeking) == 0x000001, "Wrong alignment on MediaPlayer_SupportsSeeking");
static_assert(sizeof(MediaPlayer_SupportsSeeking) == 0x000001, "Wrong size on MediaPlayer_SupportsSeeking");
static_assert(offsetof(MediaPlayer_SupportsSeeking, ReturnValue) == 0x000000, "Member 'MediaPlayer_SupportsSeeking::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlaylist.Add
// 0x0008 (0x0008 - 0x0000)
struct MediaPlaylist_Add final
{
public:
	class UMediaSource*                           MediaSource;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlaylist_Add) == 0x000008, "Wrong alignment on MediaPlaylist_Add");
static_assert(sizeof(MediaPlaylist_Add) == 0x000008, "Wrong size on MediaPlaylist_Add");
static_assert(offsetof(MediaPlaylist_Add, MediaSource) == 0x000000, "Member 'MediaPlaylist_Add::MediaSource' has a wrong offset!");

// Function MediaAssets.MediaPlaylist.Get
// 0x0010 (0x0010 - 0x0000)
struct MediaPlaylist_Get final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMediaSource*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlaylist_Get) == 0x000008, "Wrong alignment on MediaPlaylist_Get");
static_assert(sizeof(MediaPlaylist_Get) == 0x000010, "Wrong size on MediaPlaylist_Get");
static_assert(offsetof(MediaPlaylist_Get, Index_0) == 0x000000, "Member 'MediaPlaylist_Get::Index_0' has a wrong offset!");
static_assert(offsetof(MediaPlaylist_Get, ReturnValue) == 0x000008, "Member 'MediaPlaylist_Get::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlaylist.GetNext
// 0x0010 (0x0010 - 0x0000)
struct MediaPlaylist_GetNext final
{
public:
	int32                                         InOutIndex;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMediaSource*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlaylist_GetNext) == 0x000008, "Wrong alignment on MediaPlaylist_GetNext");
static_assert(sizeof(MediaPlaylist_GetNext) == 0x000010, "Wrong size on MediaPlaylist_GetNext");
static_assert(offsetof(MediaPlaylist_GetNext, InOutIndex) == 0x000000, "Member 'MediaPlaylist_GetNext::InOutIndex' has a wrong offset!");
static_assert(offsetof(MediaPlaylist_GetNext, ReturnValue) == 0x000008, "Member 'MediaPlaylist_GetNext::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlaylist.GetPrevious
// 0x0010 (0x0010 - 0x0000)
struct MediaPlaylist_GetPrevious final
{
public:
	int32                                         InOutIndex;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMediaSource*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlaylist_GetPrevious) == 0x000008, "Wrong alignment on MediaPlaylist_GetPrevious");
static_assert(sizeof(MediaPlaylist_GetPrevious) == 0x000010, "Wrong size on MediaPlaylist_GetPrevious");
static_assert(offsetof(MediaPlaylist_GetPrevious, InOutIndex) == 0x000000, "Member 'MediaPlaylist_GetPrevious::InOutIndex' has a wrong offset!");
static_assert(offsetof(MediaPlaylist_GetPrevious, ReturnValue) == 0x000008, "Member 'MediaPlaylist_GetPrevious::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlaylist.GetRandom
// 0x0010 (0x0010 - 0x0000)
struct MediaPlaylist_GetRandom final
{
public:
	int32                                         InOutIndex;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMediaSource*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlaylist_GetRandom) == 0x000008, "Wrong alignment on MediaPlaylist_GetRandom");
static_assert(sizeof(MediaPlaylist_GetRandom) == 0x000010, "Wrong size on MediaPlaylist_GetRandom");
static_assert(offsetof(MediaPlaylist_GetRandom, InOutIndex) == 0x000000, "Member 'MediaPlaylist_GetRandom::InOutIndex' has a wrong offset!");
static_assert(offsetof(MediaPlaylist_GetRandom, ReturnValue) == 0x000008, "Member 'MediaPlaylist_GetRandom::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlaylist.Insert
// 0x0010 (0x0010 - 0x0000)
struct MediaPlaylist_Insert final
{
public:
	class UMediaSource*                           MediaSource;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MediaPlaylist_Insert) == 0x000008, "Wrong alignment on MediaPlaylist_Insert");
static_assert(sizeof(MediaPlaylist_Insert) == 0x000010, "Wrong size on MediaPlaylist_Insert");
static_assert(offsetof(MediaPlaylist_Insert, MediaSource) == 0x000000, "Member 'MediaPlaylist_Insert::MediaSource' has a wrong offset!");
static_assert(offsetof(MediaPlaylist_Insert, Index_0) == 0x000008, "Member 'MediaPlaylist_Insert::Index_0' has a wrong offset!");

// Function MediaAssets.MediaPlaylist.Num
// 0x0004 (0x0004 - 0x0000)
struct MediaPlaylist_Num final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlaylist_Num) == 0x000004, "Wrong alignment on MediaPlaylist_Num");
static_assert(sizeof(MediaPlaylist_Num) == 0x000004, "Wrong size on MediaPlaylist_Num");
static_assert(offsetof(MediaPlaylist_Num, ReturnValue) == 0x000000, "Member 'MediaPlaylist_Num::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlaylist.Remove
// 0x0008 (0x0008 - 0x0000)
struct MediaPlaylist_Remove final
{
public:
	class UMediaSource*                           MediaSource;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlaylist_Remove) == 0x000008, "Wrong alignment on MediaPlaylist_Remove");
static_assert(sizeof(MediaPlaylist_Remove) == 0x000008, "Wrong size on MediaPlaylist_Remove");
static_assert(offsetof(MediaPlaylist_Remove, MediaSource) == 0x000000, "Member 'MediaPlaylist_Remove::MediaSource' has a wrong offset!");

// Function MediaAssets.MediaPlaylist.RemoveAt
// 0x0004 (0x0004 - 0x0000)
struct MediaPlaylist_RemoveAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlaylist_RemoveAt) == 0x000004, "Wrong alignment on MediaPlaylist_RemoveAt");
static_assert(sizeof(MediaPlaylist_RemoveAt) == 0x000004, "Wrong size on MediaPlaylist_RemoveAt");
static_assert(offsetof(MediaPlaylist_RemoveAt, Index_0) == 0x000000, "Member 'MediaPlaylist_RemoveAt::Index_0' has a wrong offset!");

// Function MediaAssets.FileMediaSource.SetFilePath
// 0x0010 (0x0010 - 0x0000)
struct FileMediaSource_SetFilePath final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileMediaSource_SetFilePath) == 0x000008, "Wrong alignment on FileMediaSource_SetFilePath");
static_assert(sizeof(FileMediaSource_SetFilePath) == 0x000010, "Wrong size on FileMediaSource_SetFilePath");
static_assert(offsetof(FileMediaSource_SetFilePath, Path) == 0x000000, "Member 'FileMediaSource_SetFilePath::Path' has a wrong offset!");

// Function MediaAssets.MediaTexture.GetAspectRatio
// 0x0004 (0x0004 - 0x0000)
struct MediaTexture_GetAspectRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaTexture_GetAspectRatio) == 0x000004, "Wrong alignment on MediaTexture_GetAspectRatio");
static_assert(sizeof(MediaTexture_GetAspectRatio) == 0x000004, "Wrong size on MediaTexture_GetAspectRatio");
static_assert(offsetof(MediaTexture_GetAspectRatio, ReturnValue) == 0x000000, "Member 'MediaTexture_GetAspectRatio::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaTexture.GetHeight
// 0x0004 (0x0004 - 0x0000)
struct MediaTexture_GetHeight final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaTexture_GetHeight) == 0x000004, "Wrong alignment on MediaTexture_GetHeight");
static_assert(sizeof(MediaTexture_GetHeight) == 0x000004, "Wrong size on MediaTexture_GetHeight");
static_assert(offsetof(MediaTexture_GetHeight, ReturnValue) == 0x000000, "Member 'MediaTexture_GetHeight::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaTexture.GetWidth
// 0x0004 (0x0004 - 0x0000)
struct MediaTexture_GetWidth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaTexture_GetWidth) == 0x000004, "Wrong alignment on MediaTexture_GetWidth");
static_assert(sizeof(MediaTexture_GetWidth) == 0x000004, "Wrong size on MediaTexture_GetWidth");
static_assert(offsetof(MediaTexture_GetWidth, ReturnValue) == 0x000000, "Member 'MediaTexture_GetWidth::ReturnValue' has a wrong offset!");

}

