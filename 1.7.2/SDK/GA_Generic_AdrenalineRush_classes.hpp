#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Generic_AdrenalineRush

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "E_AdrenalineRushAOE_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "E_AdrenalineRushDuration_structs.hpp"
#include "GAT_GenericActiveAbility_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Generic_AdrenalineRush.GA_Generic_AdrenalineRush_C
// 0x0290 (0x0DA0 - 0x0B10)
class UGA_Generic_AdrenalineRush_C final : public UGAT_GenericActiveAbility_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_Generic_AdrenalineRush_C;        // 0x0B10(0x0008)(Transient, DuplicateTransient)
	struct FGameplayEventData                     EventData_0;                                       // 0x0B18(0x00A8)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortPlayerPawn*                        Fort_Player_Pawn;                                  // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EventActivate;                                     // 0x0BC8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFortGameplayAbilityMontageInfo        Montage_Info;                                      // 0x0BD0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 AdrenalineRushInsta;                               // 0x0C30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         HitActors;                                         // 0x0C38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsHOT;                                             // 0x0C48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPurge;                                           // 0x0C49(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_AdrenalineRushAOE                           AOEValue;                                          // 0x0C4A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AdrenalineRushDuration                      DurationValue;                                     // 0x0C4B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4C[0x4];                                      // 0x0C4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           TargetRule;                                        // 0x0C50(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         HOTDuration;                                       // 0x0C58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C5C[0x4];                                      // 0x0C5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Target_AOE1;                                       // 0x0C60(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Target_AOE2;                                       // 0x0C68(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Target_AOE3;                                       // 0x0C70(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAttribute                     HospitalSubBuilding3;                              // 0x0C78(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         BasicHOTDuration;                                  // 0x0C98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Upgrade1HOTDuration;                               // 0x0C9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Upgrade2HOTDuration;                               // 0x0CA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InstaHeal_Default;                                 // 0x0CA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InstaHeal_Upgrade;                                 // 0x0CA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CAC[0x4];                                      // 0x0CAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 AdrenalineRushHOT;                                 // 0x0CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TC_GameplayNegative;                               // 0x0CB8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 AdrenalineRushProjectile;                          // 0x0CD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InstantHealMultiplier;                             // 0x0CE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HOTHealMultiplier;                                 // 0x0CE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TC_AOE_Heal;                                       // 0x0CE8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_HealBoost;                                      // 0x0D08(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_HOT;                                            // 0x0D28(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_Resurrect;                                      // 0x0D48(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AOE_Heal;                                          // 0x0D68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Insta_Heal_Upgraded;                               // 0x0D69(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Resurrect_Upgrade;                                 // 0x0D6A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D6B[0x5];                                      // 0x0D6B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_Cooldown;                                       // 0x0D70(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         BaseGadgetHealValue;                               // 0x0D90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalHealingValue;                                 // 0x0D94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HotPerSecondAmount;                                // 0x0D98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_Generic_AdrenalineRush(int32 EntryPoint);
	void K2_ActivateAbility();
	void Targeted_96CD2D2546A5DCD7B7C14BBA26232864(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_96CD2D2546A5DCD7B7C14BBA26232864(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void ApplyGadgetEffects(const struct FGameplayAbilityTargetDataHandle& TargetData);
	void SpawnVisuals();
	void Setup_Ability(class UAbilitySystemComponent* AbilitySystemComponent_Ref);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Generic_AdrenalineRush_C">();
	}
	static class UGA_Generic_AdrenalineRush_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Generic_AdrenalineRush_C>();
	}
};
static_assert(alignof(UGA_Generic_AdrenalineRush_C) == 0x000008, "Wrong alignment on UGA_Generic_AdrenalineRush_C");
static_assert(sizeof(UGA_Generic_AdrenalineRush_C) == 0x000DA0, "Wrong size on UGA_Generic_AdrenalineRush_C");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, UberGraphFrame_GA_Generic_AdrenalineRush_C) == 0x000B10, "Member 'UGA_Generic_AdrenalineRush_C::UberGraphFrame_GA_Generic_AdrenalineRush_C' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, EventData_0) == 0x000B18, "Member 'UGA_Generic_AdrenalineRush_C::EventData_0' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, Fort_Player_Pawn) == 0x000BC0, "Member 'UGA_Generic_AdrenalineRush_C::Fort_Player_Pawn' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, EventActivate) == 0x000BC8, "Member 'UGA_Generic_AdrenalineRush_C::EventActivate' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, Montage_Info) == 0x000BD0, "Member 'UGA_Generic_AdrenalineRush_C::Montage_Info' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, AdrenalineRushInsta) == 0x000C30, "Member 'UGA_Generic_AdrenalineRush_C::AdrenalineRushInsta' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, HitActors) == 0x000C38, "Member 'UGA_Generic_AdrenalineRush_C::HitActors' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, IsHOT) == 0x000C48, "Member 'UGA_Generic_AdrenalineRush_C::IsHOT' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, IsPurge) == 0x000C49, "Member 'UGA_Generic_AdrenalineRush_C::IsPurge' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, AOEValue) == 0x000C4A, "Member 'UGA_Generic_AdrenalineRush_C::AOEValue' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, DurationValue) == 0x000C4B, "Member 'UGA_Generic_AdrenalineRush_C::DurationValue' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, TargetRule) == 0x000C50, "Member 'UGA_Generic_AdrenalineRush_C::TargetRule' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, HOTDuration) == 0x000C58, "Member 'UGA_Generic_AdrenalineRush_C::HOTDuration' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, Target_AOE1) == 0x000C60, "Member 'UGA_Generic_AdrenalineRush_C::Target_AOE1' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, Target_AOE2) == 0x000C68, "Member 'UGA_Generic_AdrenalineRush_C::Target_AOE2' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, Target_AOE3) == 0x000C70, "Member 'UGA_Generic_AdrenalineRush_C::Target_AOE3' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, HospitalSubBuilding3) == 0x000C78, "Member 'UGA_Generic_AdrenalineRush_C::HospitalSubBuilding3' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, BasicHOTDuration) == 0x000C98, "Member 'UGA_Generic_AdrenalineRush_C::BasicHOTDuration' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, Upgrade1HOTDuration) == 0x000C9C, "Member 'UGA_Generic_AdrenalineRush_C::Upgrade1HOTDuration' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, Upgrade2HOTDuration) == 0x000CA0, "Member 'UGA_Generic_AdrenalineRush_C::Upgrade2HOTDuration' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, InstaHeal_Default) == 0x000CA4, "Member 'UGA_Generic_AdrenalineRush_C::InstaHeal_Default' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, InstaHeal_Upgrade) == 0x000CA8, "Member 'UGA_Generic_AdrenalineRush_C::InstaHeal_Upgrade' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, AdrenalineRushHOT) == 0x000CB0, "Member 'UGA_Generic_AdrenalineRush_C::AdrenalineRushHOT' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, TC_GameplayNegative) == 0x000CB8, "Member 'UGA_Generic_AdrenalineRush_C::TC_GameplayNegative' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, AdrenalineRushProjectile) == 0x000CD8, "Member 'UGA_Generic_AdrenalineRush_C::AdrenalineRushProjectile' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, InstantHealMultiplier) == 0x000CE0, "Member 'UGA_Generic_AdrenalineRush_C::InstantHealMultiplier' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, HOTHealMultiplier) == 0x000CE4, "Member 'UGA_Generic_AdrenalineRush_C::HOTHealMultiplier' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, TC_AOE_Heal) == 0x000CE8, "Member 'UGA_Generic_AdrenalineRush_C::TC_AOE_Heal' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, TC_HealBoost) == 0x000D08, "Member 'UGA_Generic_AdrenalineRush_C::TC_HealBoost' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, TC_HOT) == 0x000D28, "Member 'UGA_Generic_AdrenalineRush_C::TC_HOT' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, TC_Resurrect) == 0x000D48, "Member 'UGA_Generic_AdrenalineRush_C::TC_Resurrect' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, AOE_Heal) == 0x000D68, "Member 'UGA_Generic_AdrenalineRush_C::AOE_Heal' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, Insta_Heal_Upgraded) == 0x000D69, "Member 'UGA_Generic_AdrenalineRush_C::Insta_Heal_Upgraded' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, Resurrect_Upgrade) == 0x000D6A, "Member 'UGA_Generic_AdrenalineRush_C::Resurrect_Upgrade' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, TC_Cooldown) == 0x000D70, "Member 'UGA_Generic_AdrenalineRush_C::TC_Cooldown' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, BaseGadgetHealValue) == 0x000D90, "Member 'UGA_Generic_AdrenalineRush_C::BaseGadgetHealValue' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, FinalHealingValue) == 0x000D94, "Member 'UGA_Generic_AdrenalineRush_C::FinalHealingValue' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, HotPerSecondAmount) == 0x000D98, "Member 'UGA_Generic_AdrenalineRush_C::HotPerSecondAmount' has a wrong offset!");

}

