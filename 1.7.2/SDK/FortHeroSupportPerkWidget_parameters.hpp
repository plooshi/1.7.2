#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortHeroSupportPerkWidget

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C.ExecuteUbergraph_FortHeroSupportPerkWidget
// 0x0004 (0x0004 - 0x0000)
struct FortHeroSupportPerkWidget_C_ExecuteUbergraph_FortHeroSupportPerkWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FortHeroSupportPerkWidget_C_ExecuteUbergraph_FortHeroSupportPerkWidget) == 0x000004, "Wrong alignment on FortHeroSupportPerkWidget_C_ExecuteUbergraph_FortHeroSupportPerkWidget");
static_assert(sizeof(FortHeroSupportPerkWidget_C_ExecuteUbergraph_FortHeroSupportPerkWidget) == 0x000004, "Wrong size on FortHeroSupportPerkWidget_C_ExecuteUbergraph_FortHeroSupportPerkWidget");
static_assert(offsetof(FortHeroSupportPerkWidget_C_ExecuteUbergraph_FortHeroSupportPerkWidget, EntryPoint) == 0x000000, "Member 'FortHeroSupportPerkWidget_C_ExecuteUbergraph_FortHeroSupportPerkWidget::EntryPoint' has a wrong offset!");

// Function FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C.Update
// 0x0150 (0x0150 - 0x0000)
struct FortHeroSupportPerkWidget_C_Update final
{
public:
	bool                                          DisplayedOutsideOfHeroSquad_0;                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortSupportBonusType                         TargetedSupportType;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortSupportBonusType                         Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable2;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable3;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortSupportBonusType                         Temp_byte_Variable2;                               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0028(0x0018)()
	class FText                                   Temp_text_Variable2;                               // 0x0040(0x0018)()
	class FText                                   Temp_text_Variable3;                               // 0x0058(0x0018)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0070(0x0028)()
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0098(0x0090)()
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Select2_Default;                            // 0x0130(0x0018)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FortHeroSupportPerkWidget_C_Update) == 0x000008, "Wrong alignment on FortHeroSupportPerkWidget_C_Update");
static_assert(sizeof(FortHeroSupportPerkWidget_C_Update) == 0x000150, "Wrong size on FortHeroSupportPerkWidget_C_Update");
static_assert(offsetof(FortHeroSupportPerkWidget_C_Update, DisplayedOutsideOfHeroSquad_0) == 0x000000, "Member 'FortHeroSupportPerkWidget_C_Update::DisplayedOutsideOfHeroSquad_0' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_Update, TargetedSupportType) == 0x000001, "Member 'FortHeroSupportPerkWidget_C_Update::TargetedSupportType' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_Update, Temp_byte_Variable) == 0x000002, "Member 'FortHeroSupportPerkWidget_C_Update::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_Update, Temp_object_Variable) == 0x000008, "Member 'FortHeroSupportPerkWidget_C_Update::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_Update, Temp_object_Variable2) == 0x000010, "Member 'FortHeroSupportPerkWidget_C_Update::Temp_object_Variable2' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_Update, Temp_object_Variable3) == 0x000018, "Member 'FortHeroSupportPerkWidget_C_Update::Temp_object_Variable3' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_Update, Temp_byte_Variable2) == 0x000020, "Member 'FortHeroSupportPerkWidget_C_Update::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_Update, Temp_text_Variable) == 0x000028, "Member 'FortHeroSupportPerkWidget_C_Update::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_Update, Temp_text_Variable2) == 0x000040, "Member 'FortHeroSupportPerkWidget_C_Update::Temp_text_Variable2' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_Update, Temp_text_Variable3) == 0x000058, "Member 'FortHeroSupportPerkWidget_C_Update::Temp_text_Variable3' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_Update, K2Node_MakeStruct_SlateColor) == 0x000070, "Member 'FortHeroSupportPerkWidget_C_Update::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_Update, K2Node_MakeStruct_SlateBrush) == 0x000098, "Member 'FortHeroSupportPerkWidget_C_Update::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_Update, K2Node_Select_Default) == 0x000128, "Member 'FortHeroSupportPerkWidget_C_Update::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_Update, K2Node_Select2_Default) == 0x000130, "Member 'FortHeroSupportPerkWidget_C_Update::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_Update, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000148, "Member 'FortHeroSupportPerkWidget_C_Update::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C.UpdateLockedVisibility
// 0x0005 (0x0005 - 0x0000)
struct FortHeroSupportPerkWidget_C_UpdateLockedVisibility final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPerkUnlocked_ReturnValue;               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FortHeroSupportPerkWidget_C_UpdateLockedVisibility) == 0x000001, "Wrong alignment on FortHeroSupportPerkWidget_C_UpdateLockedVisibility");
static_assert(sizeof(FortHeroSupportPerkWidget_C_UpdateLockedVisibility) == 0x000005, "Wrong size on FortHeroSupportPerkWidget_C_UpdateLockedVisibility");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateLockedVisibility, Temp_bool_Variable) == 0x000000, "Member 'FortHeroSupportPerkWidget_C_UpdateLockedVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateLockedVisibility, Temp_byte_Variable) == 0x000001, "Member 'FortHeroSupportPerkWidget_C_UpdateLockedVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateLockedVisibility, Temp_byte_Variable2) == 0x000002, "Member 'FortHeroSupportPerkWidget_C_UpdateLockedVisibility::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateLockedVisibility, CallFunc_IsPerkUnlocked_ReturnValue) == 0x000003, "Member 'FortHeroSupportPerkWidget_C_UpdateLockedVisibility::CallFunc_IsPerkUnlocked_ReturnValue' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateLockedVisibility, K2Node_Select_Default) == 0x000004, "Member 'FortHeroSupportPerkWidget_C_UpdateLockedVisibility::K2Node_Select_Default' has a wrong offset!");

// Function FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C.UpdateActiveDisplay
// 0x0278 (0x0278 - 0x0000)
struct FortHeroSupportPerkWidget_C_UpdateActiveDisplay final
{
public:
	class UClass*                                 Temp_class_Variable;                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable3;                               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable2;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable4;                               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable2;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable5;                               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable3;                               // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable4;                               // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPerkInCorrectSlot_ReturnValue;          // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Temp_class_Variable2;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPerkInCorrectSlot_ReturnValue2;         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable6;                               // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_Select_Default;                             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_Select2_Default;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0058(0x0028)()
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPerkActive_ReturnValue;                 // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue2;                   // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor2;                     // 0x0088(0x0028)()
	ESlateVisibility                              K2Node_Select3_Default;                            // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x00B8(0x0090)()
	ESlateVisibility                              K2Node_Select4_Default;                            // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush2;                     // 0x0150(0x0090)()
	struct FSlateBrush                            K2Node_Select5_Default;                            // 0x01E0(0x0090)(ConstParm)
	bool                                          CallFunc_BooleanOR_ReturnValue3;                   // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select6_Default;                            // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay) == 0x000008, "Wrong alignment on FortHeroSupportPerkWidget_C_UpdateActiveDisplay");
static_assert(sizeof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay) == 0x000278, "Wrong size on FortHeroSupportPerkWidget_C_UpdateActiveDisplay");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, Temp_class_Variable) == 0x000000, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, Temp_bool_Variable) == 0x000008, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, Temp_bool_Variable2) == 0x000009, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, Temp_byte_Variable) == 0x00000A, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, Temp_byte_Variable2) == 0x00000B, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, Temp_bool_Variable3) == 0x00000C, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, Temp_int_Variable) == 0x000010, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, Temp_int_Variable2) == 0x000014, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::Temp_int_Variable2' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, Temp_bool_Variable4) == 0x000018, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, Temp_object_Variable) == 0x000020, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, Temp_object_Variable2) == 0x000028, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::Temp_object_Variable2' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, Temp_bool_Variable5) == 0x000030, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::Temp_bool_Variable5' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, Temp_byte_Variable3) == 0x000031, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, Temp_byte_Variable4) == 0x000032, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, CallFunc_IsPerkInCorrectSlot_ReturnValue) == 0x000033, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::CallFunc_IsPerkInCorrectSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, Temp_class_Variable2) == 0x000038, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::Temp_class_Variable2' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, CallFunc_IsPerkInCorrectSlot_ReturnValue2) == 0x000040, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::CallFunc_IsPerkInCorrectSlot_ReturnValue2' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, CallFunc_Not_PreBool_ReturnValue) == 0x000041, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, Temp_bool_Variable6) == 0x000042, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::Temp_bool_Variable6' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, CallFunc_BooleanAND_ReturnValue) == 0x000043, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, CallFunc_BooleanOR_ReturnValue) == 0x000044, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, CallFunc_Not_PreBool_ReturnValue2) == 0x000045, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, K2Node_Select_Default) == 0x000048, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, K2Node_Select2_Default) == 0x000050, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, K2Node_MakeStruct_SlateColor) == 0x000058, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, CallFunc_BooleanAND_ReturnValue2) == 0x000080, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, CallFunc_IsPerkActive_ReturnValue) == 0x000081, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::CallFunc_IsPerkActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, CallFunc_BooleanOR_ReturnValue2) == 0x000082, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::CallFunc_BooleanOR_ReturnValue2' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, K2Node_MakeStruct_SlateColor2) == 0x000088, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::K2Node_MakeStruct_SlateColor2' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, K2Node_Select3_Default) == 0x0000B0, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, K2Node_MakeStruct_SlateBrush) == 0x0000B8, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, K2Node_Select4_Default) == 0x000148, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::K2Node_Select4_Default' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, K2Node_MakeStruct_SlateBrush2) == 0x000150, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::K2Node_MakeStruct_SlateBrush2' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, K2Node_Select5_Default) == 0x0001E0, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::K2Node_Select5_Default' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, CallFunc_BooleanOR_ReturnValue3) == 0x000270, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::CallFunc_BooleanOR_ReturnValue3' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateActiveDisplay, K2Node_Select6_Default) == 0x000274, "Member 'FortHeroSupportPerkWidget_C_UpdateActiveDisplay::K2Node_Select6_Default' has a wrong offset!");

// Function FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C.UpdateEmptyVisibility
// 0x0005 (0x0005 - 0x0000)
struct FortHeroSupportPerkWidget_C_UpdateEmptyVisibility final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPerkEmpty_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FortHeroSupportPerkWidget_C_UpdateEmptyVisibility) == 0x000001, "Wrong alignment on FortHeroSupportPerkWidget_C_UpdateEmptyVisibility");
static_assert(sizeof(FortHeroSupportPerkWidget_C_UpdateEmptyVisibility) == 0x000005, "Wrong size on FortHeroSupportPerkWidget_C_UpdateEmptyVisibility");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateEmptyVisibility, Temp_bool_Variable) == 0x000000, "Member 'FortHeroSupportPerkWidget_C_UpdateEmptyVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateEmptyVisibility, Temp_byte_Variable) == 0x000001, "Member 'FortHeroSupportPerkWidget_C_UpdateEmptyVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateEmptyVisibility, Temp_byte_Variable2) == 0x000002, "Member 'FortHeroSupportPerkWidget_C_UpdateEmptyVisibility::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateEmptyVisibility, CallFunc_IsPerkEmpty_ReturnValue) == 0x000003, "Member 'FortHeroSupportPerkWidget_C_UpdateEmptyVisibility::CallFunc_IsPerkEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateEmptyVisibility, K2Node_Select_Default) == 0x000004, "Member 'FortHeroSupportPerkWidget_C_UpdateEmptyVisibility::K2Node_Select_Default' has a wrong offset!");

// Function FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C.UpdateComparisonVisibility
// 0x0005 (0x0005 - 0x0000)
struct FortHeroSupportPerkWidget_C_UpdateComparisonVisibility final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPerkHighlighted_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FortHeroSupportPerkWidget_C_UpdateComparisonVisibility) == 0x000001, "Wrong alignment on FortHeroSupportPerkWidget_C_UpdateComparisonVisibility");
static_assert(sizeof(FortHeroSupportPerkWidget_C_UpdateComparisonVisibility) == 0x000005, "Wrong size on FortHeroSupportPerkWidget_C_UpdateComparisonVisibility");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateComparisonVisibility, Temp_bool_Variable) == 0x000000, "Member 'FortHeroSupportPerkWidget_C_UpdateComparisonVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateComparisonVisibility, Temp_byte_Variable) == 0x000001, "Member 'FortHeroSupportPerkWidget_C_UpdateComparisonVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateComparisonVisibility, Temp_byte_Variable2) == 0x000002, "Member 'FortHeroSupportPerkWidget_C_UpdateComparisonVisibility::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateComparisonVisibility, CallFunc_IsPerkHighlighted_ReturnValue) == 0x000003, "Member 'FortHeroSupportPerkWidget_C_UpdateComparisonVisibility::CallFunc_IsPerkHighlighted_ReturnValue' has a wrong offset!");
static_assert(offsetof(FortHeroSupportPerkWidget_C_UpdateComparisonVisibility, K2Node_Select_Default) == 0x000004, "Member 'FortHeroSupportPerkWidget_C_UpdateComparisonVisibility::K2Node_Select_Default' has a wrong offset!");

}

