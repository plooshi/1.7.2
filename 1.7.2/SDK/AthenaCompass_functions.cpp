#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AthenaCompass

#include "Basic.hpp"

#include "AthenaCompass_classes.hpp"
#include "AthenaCompass_parameters.hpp"


namespace SDK
{

// Function AthenaCompass.AthenaCompass_C.ExecuteUbergraph_AthenaCompass
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAthenaCompass_C::ExecuteUbergraph_AthenaCompass(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaCompass_C", "ExecuteUbergraph_AthenaCompass");

	Params::AthenaCompass_C_ExecuteUbergraph_AthenaCompass Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AthenaCompass.AthenaCompass_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAthenaCompass_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaCompass_C", "Tick");

	Params::AthenaCompass_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AthenaCompass.AthenaCompass_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UAthenaCompass_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaCompass_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AthenaCompass.AthenaCompass_C.UpdateCompassMaterial
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         InRot                                                  (Parm, IsPlainOldData, NoDestructor)

void UAthenaCompass_C::UpdateCompassMaterial(const struct FRotator& InRot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaCompass_C", "UpdateCompassMaterial");

	Params::AthenaCompass_C_UpdateCompassMaterial Parms{};

	Parms.InRot = std::move(InRot);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AthenaCompass.AthenaCompass_C.UpdateMarker
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UImage*                           MarkerImage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        MarkerWorldPosition                                    (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         CameraRotation                                         (Parm, IsPlainOldData, NoDestructor)
// struct FVector                          PawnLocation                                           (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAthenaCompass_C::UpdateMarker(class UImage* MarkerImage, const struct FVector2D& MarkerWorldPosition, const struct FRotator& CameraRotation, const struct FVector& PawnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AthenaCompass_C", "UpdateMarker");

	Params::AthenaCompass_C_UpdateMarker Parms{};

	Parms.MarkerImage = MarkerImage;
	Parms.MarkerWorldPosition = std::move(MarkerWorldPosition);
	Parms.CameraRotation = std::move(CameraRotation);
	Parms.PawnLocation = std::move(PawnLocation);

	UObject::ProcessEvent(Func, &Parms);
}

}

