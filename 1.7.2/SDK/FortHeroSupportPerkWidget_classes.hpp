#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortHeroSupportPerkWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "UMG_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C
// 0x0090 (0x0648 - 0x05B8)
class UFortHeroSupportPerkWidget_C final : public UFortHeroSupportPerkWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05B8(0x0008)(Transient, DuplicateTransient)
	class UCommonBorder*                          BorderShell;                                       // 0x05C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonWidgetSwitcher*                  DescriptionTextSwitcher;                           // 0x05C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          EvolutionBorder;                                   // 0x05D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          HighlightBorder;                                   // 0x05D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageSquadBonusType;                               // 0x05E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageSquadBonusTypeShadow;                         // 0x05E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 InvalidForSlotImage;                               // 0x05F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       InvalidSlotText;                                   // 0x05F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LockedPerkImage;                                   // 0x0600(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          PerkBoxBorder;                                     // 0x0608(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       SquadBonusTypeText;                                // 0x0610(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 StarsRequired;                                     // 0x0618(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       UnlockAtText;                                      // 0x0620(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         UnlockText;                                        // 0x0628(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UClass*                                 Name_Text_Style;                                   // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UClass*                                 Description_Text_Style;                            // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          SupportTypeMatchesDisplay;                         // 0x0640(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DisplayHeaderIfActive;                             // 0x0641(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DisplayedOutsideOfHeroSquad;                       // 0x0642(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_FortHeroSupportPerkWidget(int32 EntryPoint);
	void OnStateChanged();
	void Construct();
	void OnSupportTypeUpdated();
	void OnHeroUpdated();
	void Update(bool DisplayedOutsideOfHeroSquad_0, EFortSupportBonusType TargetedSupportType);
	void UpdateVisibility();
	void UpdateLockedVisibility();
	void UpdateActiveDisplay();
	void UpdateEmptyVisibility();
	void UpdateComparisonVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FortHeroSupportPerkWidget_C">();
	}
	static class UFortHeroSupportPerkWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHeroSupportPerkWidget_C>();
	}
};
static_assert(alignof(UFortHeroSupportPerkWidget_C) == 0x000008, "Wrong alignment on UFortHeroSupportPerkWidget_C");
static_assert(sizeof(UFortHeroSupportPerkWidget_C) == 0x000648, "Wrong size on UFortHeroSupportPerkWidget_C");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, UberGraphFrame) == 0x0005B8, "Member 'UFortHeroSupportPerkWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, BorderShell) == 0x0005C0, "Member 'UFortHeroSupportPerkWidget_C::BorderShell' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, DescriptionTextSwitcher) == 0x0005C8, "Member 'UFortHeroSupportPerkWidget_C::DescriptionTextSwitcher' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, EvolutionBorder) == 0x0005D0, "Member 'UFortHeroSupportPerkWidget_C::EvolutionBorder' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, HighlightBorder) == 0x0005D8, "Member 'UFortHeroSupportPerkWidget_C::HighlightBorder' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, ImageSquadBonusType) == 0x0005E0, "Member 'UFortHeroSupportPerkWidget_C::ImageSquadBonusType' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, ImageSquadBonusTypeShadow) == 0x0005E8, "Member 'UFortHeroSupportPerkWidget_C::ImageSquadBonusTypeShadow' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, InvalidForSlotImage) == 0x0005F0, "Member 'UFortHeroSupportPerkWidget_C::InvalidForSlotImage' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, InvalidSlotText) == 0x0005F8, "Member 'UFortHeroSupportPerkWidget_C::InvalidSlotText' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, LockedPerkImage) == 0x000600, "Member 'UFortHeroSupportPerkWidget_C::LockedPerkImage' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, PerkBoxBorder) == 0x000608, "Member 'UFortHeroSupportPerkWidget_C::PerkBoxBorder' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, SquadBonusTypeText) == 0x000610, "Member 'UFortHeroSupportPerkWidget_C::SquadBonusTypeText' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, StarsRequired) == 0x000618, "Member 'UFortHeroSupportPerkWidget_C::StarsRequired' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, UnlockAtText) == 0x000620, "Member 'UFortHeroSupportPerkWidget_C::UnlockAtText' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, UnlockText) == 0x000628, "Member 'UFortHeroSupportPerkWidget_C::UnlockText' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, Name_Text_Style) == 0x000630, "Member 'UFortHeroSupportPerkWidget_C::Name_Text_Style' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, Description_Text_Style) == 0x000638, "Member 'UFortHeroSupportPerkWidget_C::Description_Text_Style' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, SupportTypeMatchesDisplay) == 0x000640, "Member 'UFortHeroSupportPerkWidget_C::SupportTypeMatchesDisplay' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, DisplayHeaderIfActive) == 0x000641, "Member 'UFortHeroSupportPerkWidget_C::DisplayHeaderIfActive' has a wrong offset!");
static_assert(offsetof(UFortHeroSupportPerkWidget_C, DisplayedOutsideOfHeroSquad) == 0x000642, "Member 'UFortHeroSupportPerkWidget_C::DisplayedOutsideOfHeroSquad' has a wrong offset!");

}

