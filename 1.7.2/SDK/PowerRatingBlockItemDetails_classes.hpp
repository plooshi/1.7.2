#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PowerRatingBlockItemDetails

#include "Basic.hpp"

#include "CommonUI_classes.hpp"
#include "FortniteUI_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass PowerRatingBlockItemDetails.PowerRatingBlockItemDetails_C
// 0x0018 (0x0250 - 0x0238)
class UPowerRatingBlockItemDetails_C final : public UCommonUserWidget
{
public:
	class UImage*                                 PowerRatingIconImage;                              // 0x0238(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UStatNumericTextBlock_C*                PowerRatingText;                                   // 0x0240(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsComparing;                                       // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PowerRatingForComparison;                          // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetPowerRatingValue(int32 PowerRating, float InterpolationDuration);
	void SetPowerRatingFromItem(class UFortItem* Item, float InterpolationDuration);
	void SetPowerRatingValueForComparison(int32 Value);
	void UpdateComparison();
	void ClearComparison();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PowerRatingBlockItemDetails_C">();
	}
	static class UPowerRatingBlockItemDetails_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPowerRatingBlockItemDetails_C>();
	}
};
static_assert(alignof(UPowerRatingBlockItemDetails_C) == 0x000008, "Wrong alignment on UPowerRatingBlockItemDetails_C");
static_assert(sizeof(UPowerRatingBlockItemDetails_C) == 0x000250, "Wrong size on UPowerRatingBlockItemDetails_C");
static_assert(offsetof(UPowerRatingBlockItemDetails_C, PowerRatingIconImage) == 0x000238, "Member 'UPowerRatingBlockItemDetails_C::PowerRatingIconImage' has a wrong offset!");
static_assert(offsetof(UPowerRatingBlockItemDetails_C, PowerRatingText) == 0x000240, "Member 'UPowerRatingBlockItemDetails_C::PowerRatingText' has a wrong offset!");
static_assert(offsetof(UPowerRatingBlockItemDetails_C, IsComparing) == 0x000248, "Member 'UPowerRatingBlockItemDetails_C::IsComparing' has a wrong offset!");
static_assert(offsetof(UPowerRatingBlockItemDetails_C, PowerRatingForComparison) == 0x00024C, "Member 'UPowerRatingBlockItemDetails_C::PowerRatingForComparison' has a wrong offset!");

}

