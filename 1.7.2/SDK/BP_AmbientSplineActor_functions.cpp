#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AmbientSplineActor

#include "Basic.hpp"

#include "BP_AmbientSplineActor_classes.hpp"
#include "BP_AmbientSplineActor_parameters.hpp"


namespace SDK
{

// Function BP_AmbientSplineActor.BP_AmbientSplineActor_C.ExecuteUbergraph_BP_AmbientSplineActor
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AmbientSplineActor_C::ExecuteUbergraph_BP_AmbientSplineActor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbientSplineActor_C", "ExecuteUbergraph_BP_AmbientSplineActor");

	Params::BP_AmbientSplineActor_C_ExecuteUbergraph_BP_AmbientSplineActor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AmbientSplineActor.BP_AmbientSplineActor_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AmbientSplineActor_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbientSplineActor_C", "ReceiveTick");

	Params::BP_AmbientSplineActor_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AmbientSplineActor.BP_AmbientSplineActor_C.Check Closest Point
// (BlueprintCallable, BlueprintEvent)

void ABP_AmbientSplineActor_C::Check_Closest_Point()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbientSplineActor_C", "Check Closest Point");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmbientSplineActor.BP_AmbientSplineActor_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AmbientSplineActor_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbientSplineActor_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmbientSplineActor.BP_AmbientSplineActor_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AmbientSplineActor_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbientSplineActor_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmbientSplineActor.BP_AmbientSplineActor_C.GetViewTargetLoc
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Target_Loc                                             (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AmbientSplineActor_C::GetViewTargetLoc(struct FVector* Target_Loc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbientSplineActor_C", "GetViewTargetLoc");

	Params::BP_AmbientSplineActor_C_GetViewTargetLoc Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Target_Loc != nullptr)
		*Target_Loc = std::move(Parms.Target_Loc);
}


// Function BP_AmbientSplineActor.BP_AmbientSplineActor_C.DistSq
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Loc_A                                                  (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Loc_B                                                  (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AmbientSplineActor_C::DistSq(const struct FVector& Loc_A, const struct FVector& Loc_B, float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbientSplineActor_C", "DistSq");

	Params::BP_AmbientSplineActor_C_DistSq Parms{};

	Parms.Loc_A = std::move(Loc_A);
	Parms.Loc_B = std::move(Loc_B);

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function BP_AmbientSplineActor.BP_AmbientSplineActor_C.SetNewCheckFrequency
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AmbientSplineActor_C::SetNewCheckFrequency(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbientSplineActor_C", "SetNewCheckFrequency");

	Params::BP_AmbientSplineActor_C_SetNewCheckFrequency Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AmbientSplineActor.BP_AmbientSplineActor_C.SetFade
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    _Out                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AmbientSplineActor_C::SetFade(bool _Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbientSplineActor_C", "SetFade");

	Params::BP_AmbientSplineActor_C_SetFade Parms{};

	Parms._Out = _Out;

	UObject::ProcessEvent(Func, &Parms);
}

}

