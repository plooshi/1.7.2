#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PerksList

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass PerksList.PerksList_C
// 0x00E8 (0x0398 - 0x02B0)
class UPerksList_C final : public UFortPerksWidget_NUI
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(Transient, DuplicateTransient)
	class UCommonBorder*                          BorderLockedL;                                     // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          BorderLockedR;                                     // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          BorderUnlockedL;                                   // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          BorderUnlockedR;                                   // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPerkDivider_C*                         PerkDivider;                                       // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPerkDivider_C*                         PerkDivider_3;                                     // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPerkDivider_C*                         PerkDivider_4;                                     // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           PerksLockedL;                                      // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           PerksLockedR;                                      // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         PerksNoTiers;                                      // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           PerksRightColumn;                                  // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           PerksUnlockedL;                                    // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           PerksUnlockedR;                                    // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           PerkTiers;                                         // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonWidgetSwitcher*                  PerkTierSwitcher;                                  // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPerkTierWidgetNew_C*                   PerkTierWidgetNew;                                 // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPerkTierWidgetNew_C*                   PerkTierWidgetNew_0;                               // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPerkWidgetNew_C*                       PerkWidgetNew;                                     // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPerkWidgetNew_C*                       PerkWidgetNew_0;                                   // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPerkWidgetNew_C*                       PerkWidgetNew_1;                                   // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPerkWidgetNew_C*                       PerkWidgetNew_2;                                   // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bIncludeName;                                      // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bFirstTier;                                        // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIncludeDescription;                               // 0x0362(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	EFortBrushSize                                IconSize;                                          // 0x0363(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bGenerateTiers;                                    // 0x0364(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bFirstPerkCompleteL;                               // 0x0365(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFirstLockPerkCompleteL;                           // 0x0366(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_367[0x1];                                      // 0x0367(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PerkCount;                                         // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTwoColumns;                                       // 0x036C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bSecondColumnStarted;                              // 0x036D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFirstPerkCompleteR;                               // 0x036E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFirstLockPerkCompleteR;                           // 0x036F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         SecondColumnSplitCount;                            // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FMargin                                RowPadding;                                        // 0x0374(0x0010)(Edit, BlueprintVisible, NoDestructor)
	struct FMargin                                Description_Padding;                               // 0x0384(0x0010)(Edit, BlueprintVisible, NoDestructor)
	bool                                          bUseLargeFormatNameOnly;                           // 0x0394(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bShowActiveAbilitiesOnly;                          // 0x0395(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bEnableMouseTooltips;                              // 0x0396(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void ExecuteUbergraph_PerksList(int32 EntryPoint);
	void OnStateChanged();
	void OnHeroChanged();
	void Construct();
	void OnGeneratePerk(const struct FFortUIPerk& FortPerk, class UFortPerkWidget_NUI* PerkWidget);
	void OnGeneratePerkTier(const struct FFortUIPerkTier& FortPerkTier, class UFortPerkTierWidget_NUI* PerkTierWidget);
	void ResetVariables();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PerksList_C">();
	}
	static class UPerksList_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPerksList_C>();
	}
};
static_assert(alignof(UPerksList_C) == 0x000008, "Wrong alignment on UPerksList_C");
static_assert(sizeof(UPerksList_C) == 0x000398, "Wrong size on UPerksList_C");
static_assert(offsetof(UPerksList_C, UberGraphFrame) == 0x0002B0, "Member 'UPerksList_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPerksList_C, BorderLockedL) == 0x0002B8, "Member 'UPerksList_C::BorderLockedL' has a wrong offset!");
static_assert(offsetof(UPerksList_C, BorderLockedR) == 0x0002C0, "Member 'UPerksList_C::BorderLockedR' has a wrong offset!");
static_assert(offsetof(UPerksList_C, BorderUnlockedL) == 0x0002C8, "Member 'UPerksList_C::BorderUnlockedL' has a wrong offset!");
static_assert(offsetof(UPerksList_C, BorderUnlockedR) == 0x0002D0, "Member 'UPerksList_C::BorderUnlockedR' has a wrong offset!");
static_assert(offsetof(UPerksList_C, PerkDivider) == 0x0002D8, "Member 'UPerksList_C::PerkDivider' has a wrong offset!");
static_assert(offsetof(UPerksList_C, PerkDivider_3) == 0x0002E0, "Member 'UPerksList_C::PerkDivider_3' has a wrong offset!");
static_assert(offsetof(UPerksList_C, PerkDivider_4) == 0x0002E8, "Member 'UPerksList_C::PerkDivider_4' has a wrong offset!");
static_assert(offsetof(UPerksList_C, PerksLockedL) == 0x0002F0, "Member 'UPerksList_C::PerksLockedL' has a wrong offset!");
static_assert(offsetof(UPerksList_C, PerksLockedR) == 0x0002F8, "Member 'UPerksList_C::PerksLockedR' has a wrong offset!");
static_assert(offsetof(UPerksList_C, PerksNoTiers) == 0x000300, "Member 'UPerksList_C::PerksNoTiers' has a wrong offset!");
static_assert(offsetof(UPerksList_C, PerksRightColumn) == 0x000308, "Member 'UPerksList_C::PerksRightColumn' has a wrong offset!");
static_assert(offsetof(UPerksList_C, PerksUnlockedL) == 0x000310, "Member 'UPerksList_C::PerksUnlockedL' has a wrong offset!");
static_assert(offsetof(UPerksList_C, PerksUnlockedR) == 0x000318, "Member 'UPerksList_C::PerksUnlockedR' has a wrong offset!");
static_assert(offsetof(UPerksList_C, PerkTiers) == 0x000320, "Member 'UPerksList_C::PerkTiers' has a wrong offset!");
static_assert(offsetof(UPerksList_C, PerkTierSwitcher) == 0x000328, "Member 'UPerksList_C::PerkTierSwitcher' has a wrong offset!");
static_assert(offsetof(UPerksList_C, PerkTierWidgetNew) == 0x000330, "Member 'UPerksList_C::PerkTierWidgetNew' has a wrong offset!");
static_assert(offsetof(UPerksList_C, PerkTierWidgetNew_0) == 0x000338, "Member 'UPerksList_C::PerkTierWidgetNew_0' has a wrong offset!");
static_assert(offsetof(UPerksList_C, PerkWidgetNew) == 0x000340, "Member 'UPerksList_C::PerkWidgetNew' has a wrong offset!");
static_assert(offsetof(UPerksList_C, PerkWidgetNew_0) == 0x000348, "Member 'UPerksList_C::PerkWidgetNew_0' has a wrong offset!");
static_assert(offsetof(UPerksList_C, PerkWidgetNew_1) == 0x000350, "Member 'UPerksList_C::PerkWidgetNew_1' has a wrong offset!");
static_assert(offsetof(UPerksList_C, PerkWidgetNew_2) == 0x000358, "Member 'UPerksList_C::PerkWidgetNew_2' has a wrong offset!");
static_assert(offsetof(UPerksList_C, bIncludeName) == 0x000360, "Member 'UPerksList_C::bIncludeName' has a wrong offset!");
static_assert(offsetof(UPerksList_C, bFirstTier) == 0x000361, "Member 'UPerksList_C::bFirstTier' has a wrong offset!");
static_assert(offsetof(UPerksList_C, bIncludeDescription) == 0x000362, "Member 'UPerksList_C::bIncludeDescription' has a wrong offset!");
static_assert(offsetof(UPerksList_C, IconSize) == 0x000363, "Member 'UPerksList_C::IconSize' has a wrong offset!");
static_assert(offsetof(UPerksList_C, bGenerateTiers) == 0x000364, "Member 'UPerksList_C::bGenerateTiers' has a wrong offset!");
static_assert(offsetof(UPerksList_C, bFirstPerkCompleteL) == 0x000365, "Member 'UPerksList_C::bFirstPerkCompleteL' has a wrong offset!");
static_assert(offsetof(UPerksList_C, bFirstLockPerkCompleteL) == 0x000366, "Member 'UPerksList_C::bFirstLockPerkCompleteL' has a wrong offset!");
static_assert(offsetof(UPerksList_C, PerkCount) == 0x000368, "Member 'UPerksList_C::PerkCount' has a wrong offset!");
static_assert(offsetof(UPerksList_C, bTwoColumns) == 0x00036C, "Member 'UPerksList_C::bTwoColumns' has a wrong offset!");
static_assert(offsetof(UPerksList_C, bSecondColumnStarted) == 0x00036D, "Member 'UPerksList_C::bSecondColumnStarted' has a wrong offset!");
static_assert(offsetof(UPerksList_C, bFirstPerkCompleteR) == 0x00036E, "Member 'UPerksList_C::bFirstPerkCompleteR' has a wrong offset!");
static_assert(offsetof(UPerksList_C, bFirstLockPerkCompleteR) == 0x00036F, "Member 'UPerksList_C::bFirstLockPerkCompleteR' has a wrong offset!");
static_assert(offsetof(UPerksList_C, SecondColumnSplitCount) == 0x000370, "Member 'UPerksList_C::SecondColumnSplitCount' has a wrong offset!");
static_assert(offsetof(UPerksList_C, RowPadding) == 0x000374, "Member 'UPerksList_C::RowPadding' has a wrong offset!");
static_assert(offsetof(UPerksList_C, Description_Padding) == 0x000384, "Member 'UPerksList_C::Description_Padding' has a wrong offset!");
static_assert(offsetof(UPerksList_C, bUseLargeFormatNameOnly) == 0x000394, "Member 'UPerksList_C::bUseLargeFormatNameOnly' has a wrong offset!");
static_assert(offsetof(UPerksList_C, bShowActiveAbilitiesOnly) == 0x000395, "Member 'UPerksList_C::bShowActiveAbilitiesOnly' has a wrong offset!");
static_assert(offsetof(UPerksList_C, bEnableMouseTooltips) == 0x000396, "Member 'UPerksList_C::bEnableMouseTooltips' has a wrong offset!");

}

