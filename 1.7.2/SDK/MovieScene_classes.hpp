#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieScene

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "MovieScene_structs.hpp"


namespace SDK
{

// Class MovieScene.MovieSceneSignedObject
// 0x0088 (0x00B0 - 0x0028)
class UMovieSceneSignedObject : public UObject
{
public:
	struct FGuid                                  Signature;                                         // 0x0028(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x78];                                      // 0x0038(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSignedObject">();
	}
	static class UMovieSceneSignedObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSignedObject>();
	}
};
static_assert(alignof(UMovieSceneSignedObject) == 0x000008, "Wrong alignment on UMovieSceneSignedObject");
static_assert(sizeof(UMovieSceneSignedObject) == 0x0000B0, "Wrong size on UMovieSceneSignedObject");
static_assert(offsetof(UMovieSceneSignedObject, Signature) == 0x000028, "Member 'UMovieSceneSignedObject::Signature' has a wrong offset!");

// Class MovieScene.MovieScene
// 0x0080 (0x0130 - 0x00B0)
class UMovieScene final : public UMovieSceneSignedObject
{
public:
	TArray<struct FMovieSceneSpawnable>           Spawnables;                                        // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FMovieScenePossessable>         Possessables;                                      // 0x00C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FMovieSceneBinding>             ObjectBindings;                                    // 0x00D0(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UMovieSceneTrack*>               MasterTracks;                                      // 0x00E0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UMovieSceneTrack*                       CameraCutTrack;                                    // 0x00F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFloatRange                            SelectionRange;                                    // 0x00F8(0x0010)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFloatRange                            PlaybackRange;                                     // 0x0108(0x0010)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bForceFixedFrameIntervalPlayback;                  // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FixedFrameInterval;                                // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InTime;                                            // 0x0120(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OutTime;                                           // 0x0124(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartTime;                                         // 0x0128(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndTime;                                           // 0x012C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene">();
	}
	static class UMovieScene* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene>();
	}
};
static_assert(alignof(UMovieScene) == 0x000008, "Wrong alignment on UMovieScene");
static_assert(sizeof(UMovieScene) == 0x000130, "Wrong size on UMovieScene");
static_assert(offsetof(UMovieScene, Spawnables) == 0x0000B0, "Member 'UMovieScene::Spawnables' has a wrong offset!");
static_assert(offsetof(UMovieScene, Possessables) == 0x0000C0, "Member 'UMovieScene::Possessables' has a wrong offset!");
static_assert(offsetof(UMovieScene, ObjectBindings) == 0x0000D0, "Member 'UMovieScene::ObjectBindings' has a wrong offset!");
static_assert(offsetof(UMovieScene, MasterTracks) == 0x0000E0, "Member 'UMovieScene::MasterTracks' has a wrong offset!");
static_assert(offsetof(UMovieScene, CameraCutTrack) == 0x0000F0, "Member 'UMovieScene::CameraCutTrack' has a wrong offset!");
static_assert(offsetof(UMovieScene, SelectionRange) == 0x0000F8, "Member 'UMovieScene::SelectionRange' has a wrong offset!");
static_assert(offsetof(UMovieScene, PlaybackRange) == 0x000108, "Member 'UMovieScene::PlaybackRange' has a wrong offset!");
static_assert(offsetof(UMovieScene, bForceFixedFrameIntervalPlayback) == 0x000118, "Member 'UMovieScene::bForceFixedFrameIntervalPlayback' has a wrong offset!");
static_assert(offsetof(UMovieScene, FixedFrameInterval) == 0x00011C, "Member 'UMovieScene::FixedFrameInterval' has a wrong offset!");
static_assert(offsetof(UMovieScene, InTime) == 0x000120, "Member 'UMovieScene::InTime' has a wrong offset!");
static_assert(offsetof(UMovieScene, OutTime) == 0x000124, "Member 'UMovieScene::OutTime' has a wrong offset!");
static_assert(offsetof(UMovieScene, StartTime) == 0x000128, "Member 'UMovieScene::StartTime' has a wrong offset!");
static_assert(offsetof(UMovieScene, EndTime) == 0x00012C, "Member 'UMovieScene::EndTime' has a wrong offset!");

// Class MovieScene.MovieSceneBindingOverridesInterface
// 0x0000 (0x0028 - 0x0028)
class IMovieSceneBindingOverridesInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneBindingOverridesInterface">();
	}
	static class IMovieSceneBindingOverridesInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMovieSceneBindingOverridesInterface>();
	}
};
static_assert(alignof(IMovieSceneBindingOverridesInterface) == 0x000008, "Wrong alignment on IMovieSceneBindingOverridesInterface");
static_assert(sizeof(IMovieSceneBindingOverridesInterface) == 0x000028, "Wrong size on IMovieSceneBindingOverridesInterface");

// Class MovieScene.MovieSceneBindingOverrides
// 0x0070 (0x0098 - 0x0028)
class UMovieSceneBindingOverrides final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneBindingOverrideData> BindingData;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x58];                                      // 0x0040(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneBindingOverrides">();
	}
	static class UMovieSceneBindingOverrides* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneBindingOverrides>();
	}
};
static_assert(alignof(UMovieSceneBindingOverrides) == 0x000008, "Wrong alignment on UMovieSceneBindingOverrides");
static_assert(sizeof(UMovieSceneBindingOverrides) == 0x000098, "Wrong size on UMovieSceneBindingOverrides");
static_assert(offsetof(UMovieSceneBindingOverrides, BindingData) == 0x000030, "Member 'UMovieSceneBindingOverrides::BindingData' has a wrong offset!");

// Class MovieScene.MovieSceneBindingOwnerInterface
// 0x0000 (0x0028 - 0x0028)
class IMovieSceneBindingOwnerInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneBindingOwnerInterface">();
	}
	static class IMovieSceneBindingOwnerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMovieSceneBindingOwnerInterface>();
	}
};
static_assert(alignof(IMovieSceneBindingOwnerInterface) == 0x000008, "Wrong alignment on IMovieSceneBindingOwnerInterface");
static_assert(sizeof(IMovieSceneBindingOwnerInterface) == 0x000028, "Wrong size on IMovieSceneBindingOwnerInterface");

// Class MovieScene.MovieSceneFolder
// 0x0048 (0x0070 - 0x0028)
class UMovieSceneFolder final : public UObject
{
public:
	class FName                                   FolderName;                                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMovieSceneFolder*>              ChildFolders;                                      // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UMovieSceneTrack*>               ChildMasterTracks;                                 // 0x0040(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ChildObjectBindingStrings;                         // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFolder">();
	}
	static class UMovieSceneFolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFolder>();
	}
};
static_assert(alignof(UMovieSceneFolder) == 0x000008, "Wrong alignment on UMovieSceneFolder");
static_assert(sizeof(UMovieSceneFolder) == 0x000070, "Wrong size on UMovieSceneFolder");
static_assert(offsetof(UMovieSceneFolder, FolderName) == 0x000028, "Member 'UMovieSceneFolder::FolderName' has a wrong offset!");
static_assert(offsetof(UMovieSceneFolder, ChildFolders) == 0x000030, "Member 'UMovieSceneFolder::ChildFolders' has a wrong offset!");
static_assert(offsetof(UMovieSceneFolder, ChildMasterTracks) == 0x000040, "Member 'UMovieSceneFolder::ChildMasterTracks' has a wrong offset!");
static_assert(offsetof(UMovieSceneFolder, ChildObjectBindingStrings) == 0x000050, "Member 'UMovieSceneFolder::ChildObjectBindingStrings' has a wrong offset!");

// Class MovieScene.MovieSceneSequencePlayer
// 0x0668 (0x0690 - 0x0028)
class UMovieSceneSequencePlayer : public UObject
{
public:
	uint8                                         Pad_28[0x358];                                     // 0x0028(0x0358)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnPlay;                                            // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnStop;                                            // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPause;                                           // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         bIsPlaying : 1;                                    // 0x03B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bReversePlayback : 1;                              // 0x03B0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bPendingFirstUpdate : 1;                           // 0x03B0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieSceneSequence*                    Sequence;                                          // 0x03B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeCursorPosition;                                // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartTime;                                         // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EndTime;                                           // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentNumLoops;                                   // 0x03CC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D0[0x10];                                     // 0x03D0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneSequencePlaybackSettings    PlaybackSettings;                                  // 0x03E0(0x0028)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_408[0x288];                                    // 0x0408(0x0288)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangePlaybackDirection();
	void Pause();
	void Play();
	void PlayLooping(int32 NumLoops);
	void PlayReverse();
	void SetPlaybackPosition(float NewPlaybackPosition);
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);
	void SetPlayRate(float PlayRate);
	void StartPlayingNextTick();
	void Stop();

	float GetLength() const;
	float GetPlaybackEnd() const;
	float GetPlaybackPosition() const;
	float GetPlaybackStart() const;
	float GetPlayRate() const;
	bool IsPlaying() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSequencePlayer">();
	}
	static class UMovieSceneSequencePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSequencePlayer>();
	}
};
static_assert(alignof(UMovieSceneSequencePlayer) == 0x000008, "Wrong alignment on UMovieSceneSequencePlayer");
static_assert(sizeof(UMovieSceneSequencePlayer) == 0x000690, "Wrong size on UMovieSceneSequencePlayer");
static_assert(offsetof(UMovieSceneSequencePlayer, OnPlay) == 0x000380, "Member 'UMovieSceneSequencePlayer::OnPlay' has a wrong offset!");
static_assert(offsetof(UMovieSceneSequencePlayer, OnStop) == 0x000390, "Member 'UMovieSceneSequencePlayer::OnStop' has a wrong offset!");
static_assert(offsetof(UMovieSceneSequencePlayer, OnPause) == 0x0003A0, "Member 'UMovieSceneSequencePlayer::OnPause' has a wrong offset!");
static_assert(offsetof(UMovieSceneSequencePlayer, Sequence) == 0x0003B8, "Member 'UMovieSceneSequencePlayer::Sequence' has a wrong offset!");
static_assert(offsetof(UMovieSceneSequencePlayer, TimeCursorPosition) == 0x0003C0, "Member 'UMovieSceneSequencePlayer::TimeCursorPosition' has a wrong offset!");
static_assert(offsetof(UMovieSceneSequencePlayer, StartTime) == 0x0003C4, "Member 'UMovieSceneSequencePlayer::StartTime' has a wrong offset!");
static_assert(offsetof(UMovieSceneSequencePlayer, EndTime) == 0x0003C8, "Member 'UMovieSceneSequencePlayer::EndTime' has a wrong offset!");
static_assert(offsetof(UMovieSceneSequencePlayer, CurrentNumLoops) == 0x0003CC, "Member 'UMovieSceneSequencePlayer::CurrentNumLoops' has a wrong offset!");
static_assert(offsetof(UMovieSceneSequencePlayer, PlaybackSettings) == 0x0003E0, "Member 'UMovieSceneSequencePlayer::PlaybackSettings' has a wrong offset!");

// Class MovieScene.MovieSceneSection
// 0x0018 (0x00C8 - 0x00B0)
#pragma pack(push, 0x1)
class alignas(0x08) UMovieSceneSection : public UMovieSceneSignedObject
{
public:
	struct FMovieSceneSectionEvalOptions          EvalOptions;                                       // 0x00B0(0x0002)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x2];                                       // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndTime;                                           // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RowIndex;                                          // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         OverlapPriority;                                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bIsActive : 1;                                     // 0x00C4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bIsLocked : 1;                                     // 0x00C4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bIsInfinite : 1;                                   // 0x00C4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSection">();
	}
	static class UMovieSceneSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSection>();
	}
};
#pragma pack(pop)
static_assert(alignof(UMovieSceneSection) == 0x000008, "Wrong alignment on UMovieSceneSection");
static_assert(sizeof(UMovieSceneSection) == 0x0000C8, "Wrong size on UMovieSceneSection");
static_assert(offsetof(UMovieSceneSection, EvalOptions) == 0x0000B0, "Member 'UMovieSceneSection::EvalOptions' has a wrong offset!");
static_assert(offsetof(UMovieSceneSection, StartTime) == 0x0000B4, "Member 'UMovieSceneSection::StartTime' has a wrong offset!");
static_assert(offsetof(UMovieSceneSection, EndTime) == 0x0000B8, "Member 'UMovieSceneSection::EndTime' has a wrong offset!");
static_assert(offsetof(UMovieSceneSection, RowIndex) == 0x0000BC, "Member 'UMovieSceneSection::RowIndex' has a wrong offset!");
static_assert(offsetof(UMovieSceneSection, OverlapPriority) == 0x0000C0, "Member 'UMovieSceneSection::OverlapPriority' has a wrong offset!");

// Class MovieScene.MovieSceneTrack
// 0x0008 (0x00B8 - 0x00B0)
#pragma pack(push, 0x1)
class alignas(0x08) UMovieSceneTrack : public UMovieSceneSignedObject
{
public:
	struct FMovieSceneTrackEvalOptions            EvalOptions;                                       // 0x00B0(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneTrack">();
	}
	static class UMovieSceneTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneTrack>();
	}
};
#pragma pack(pop)
static_assert(alignof(UMovieSceneTrack) == 0x000008, "Wrong alignment on UMovieSceneTrack");
static_assert(sizeof(UMovieSceneTrack) == 0x0000B8, "Wrong size on UMovieSceneTrack");
static_assert(offsetof(UMovieSceneTrack, EvalOptions) == 0x0000B0, "Member 'UMovieSceneTrack::EvalOptions' has a wrong offset!");

// Class MovieScene.MovieSceneSequence
// 0x0228 (0x02D8 - 0x00B0)
#pragma pack(push, 0x1)
class alignas(0x08) UMovieSceneSequence : public UMovieSceneSignedObject
{
public:
	struct FCachedMovieSceneEvaluationTemplate    EvaluationTemplate;                                // 0x00B0(0x0220)(NativeAccessSpecifierPublic)
	struct FMovieSceneTrackCompilationParams      TemplateParameters;                                // 0x02D0(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bParentContextsAreSignificant;                     // 0x02D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D2[0x6];                                      // 0x02D2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSequence">();
	}
	static class UMovieSceneSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSequence>();
	}
};
#pragma pack(pop)
static_assert(alignof(UMovieSceneSequence) == 0x000008, "Wrong alignment on UMovieSceneSequence");
static_assert(sizeof(UMovieSceneSequence) == 0x0002D8, "Wrong size on UMovieSceneSequence");
static_assert(offsetof(UMovieSceneSequence, EvaluationTemplate) == 0x0000B0, "Member 'UMovieSceneSequence::EvaluationTemplate' has a wrong offset!");
static_assert(offsetof(UMovieSceneSequence, TemplateParameters) == 0x0002D0, "Member 'UMovieSceneSequence::TemplateParameters' has a wrong offset!");
static_assert(offsetof(UMovieSceneSequence, bParentContextsAreSignificant) == 0x0002D1, "Member 'UMovieSceneSequence::bParentContextsAreSignificant' has a wrong offset!");

// Class MovieScene.MovieSceneNameableTrack
// 0x0000 (0x00B8 - 0x00B8)
#pragma pack(push, 0x1)
class alignas(0x08) UMovieSceneNameableTrack : public UMovieSceneTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneNameableTrack">();
	}
	static class UMovieSceneNameableTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneNameableTrack>();
	}
};
#pragma pack(pop)
static_assert(alignof(UMovieSceneNameableTrack) == 0x000008, "Wrong alignment on UMovieSceneNameableTrack");
static_assert(sizeof(UMovieSceneNameableTrack) == 0x0000B8, "Wrong size on UMovieSceneNameableTrack");

}

