#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FrontEndRewards_Widget

#include "Basic.hpp"

#include "FrontEndRewards_Widget_classes.hpp"
#include "FrontEndRewards_Widget_parameters.hpp"


namespace SDK
{

// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.ExecuteUbergraph_FrontEndRewards_Widget
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFrontEndRewards_Widget_C::ExecuteUbergraph_FrontEndRewards_Widget(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "ExecuteUbergraph_FrontEndRewards_Widget");

	Params::FrontEndRewards_Widget_C_ExecuteUbergraph_FrontEndRewards_Widget Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.OnMatchmakingOrLobbyStarted
// (BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::OnMatchmakingOrLobbyStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "OnMatchmakingOrLobbyStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UFrontEndRewards_Widget_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.IntroSequence
// (BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::IntroSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "IntroSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.InspectItem
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFortItem*                        ItemToInspect                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFrontEndRewards_Widget_C::InspectItem(class UFortItem* ItemToInspect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "InspectItem");

	Params::FrontEndRewards_Widget_C_InspectItem Parms{};

	Parms.ItemToInspect = ItemToInspect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.OnDeactivated
// (Event, Protected, BlueprintEvent)

void UFrontEndRewards_Widget_C::OnDeactivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "OnDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.HideStarburst
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFrontEndRewards_Widget_C::HideStarburst(float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "HideStarburst");

	Params::FrontEndRewards_Widget_C_HideStarburst Parms{};

	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.OnActivated
// (Event, Protected, BlueprintEvent)

void UFrontEndRewards_Widget_C::OnActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "OnActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UFrontEndRewards_Widget_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.BndEvt__ButtonOpen_K2Node_ComponentBoundEvent_26_CommonButtonClicked__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UCommonButton*                    Button                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFrontEndRewards_Widget_C::BndEvt__ButtonOpen_K2Node_ComponentBoundEvent_26_CommonButtonClicked__DelegateSignature(class UCommonButton* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "BndEvt__ButtonOpen_K2Node_ComponentBoundEvent_26_CommonButtonClicked__DelegateSignature");

	Params::FrontEndRewards_Widget_C_BndEvt__ButtonOpen_K2Node_ComponentBoundEvent_26_CommonButtonClicked__DelegateSignature Parms{};

	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.OnPrimaryActionTextChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm)

void UFrontEndRewards_Widget_C::OnPrimaryActionTextChanged(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "OnPrimaryActionTextChanged");

	Params::FrontEndRewards_Widget_C_OnPrimaryActionTextChanged Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.OnPrimaryActionHidden
// (Event, Protected, BlueprintEvent)

void UFrontEndRewards_Widget_C::OnPrimaryActionHidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "OnPrimaryActionHidden");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.OnPrimaryActionEnabled
// (Event, Protected, BlueprintEvent)

void UFrontEndRewards_Widget_C::OnPrimaryActionEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "OnPrimaryActionEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.OnPrimaryActionDisabled
// (Event, Protected, BlueprintEvent)

void UFrontEndRewards_Widget_C::OnPrimaryActionDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "OnPrimaryActionDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.OnNavigationDown
// (Event, Public, BlueprintEvent)

void UFrontEndRewards_Widget_C::OnNavigationDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "OnNavigationDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.OnNavigationUp
// (Event, Public, BlueprintEvent)

void UFrontEndRewards_Widget_C::OnNavigationUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "OnNavigationUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.OnNavigationRight
// (Event, Public, BlueprintEvent)

void UFrontEndRewards_Widget_C::OnNavigationRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "OnNavigationRight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.OnNavigationLeft
// (Event, Public, BlueprintEvent)

void UFrontEndRewards_Widget_C::OnNavigationLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "OnNavigationLeft");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.HandleCurrentRewardDisplayed
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::HandleCurrentRewardDisplayed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "HandleCurrentRewardDisplayed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.DropReward
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFortRewardNotificationData*      InReward                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFrontEndRewards_Widget_C::DropReward(class UFortRewardNotificationData* InReward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "DropReward");

	Params::FrontEndRewards_Widget_C_DropReward Parms{};

	Parms.InReward = InReward;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.PopNextReward
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::PopNextReward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "PopNextReward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.HandleShowHeaderFinished
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::HandleShowHeaderFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "HandleShowHeaderFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.BindEvents
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::BindEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "BindEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.AdjustCurrentRewardPadding
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::AdjustCurrentRewardPadding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "AdjustCurrentRewardPadding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.PopulateCurrentRewardWidget
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::PopulateCurrentRewardWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "PopulateCurrentRewardWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.ShowCurrentReward
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::ShowCurrentReward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "ShowCurrentReward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.Cleanup
// (Public, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::Cleanup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "Cleanup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.HandleExpeditionCompleted
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Succeeded                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<struct FFortItemInstanceQuantityPair>Rewards                                                (Parm, OutParm, ZeroConstructor, ReferenceParm)

void UFrontEndRewards_Widget_C::HandleExpeditionCompleted(bool Succeeded, TArray<struct FFortItemInstanceQuantityPair>& Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "HandleExpeditionCompleted");

	Params::FrontEndRewards_Widget_C_HandleExpeditionCompleted Parms{};

	Parms.Succeeded = Succeeded;
	Parms.Rewards = std::move(Rewards);

	UObject::ProcessEvent(Func, &Parms);

	Rewards = std::move(Parms.Rewards);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.InitInitialRewards
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFrontEndRewards_Definition      Definition                                             (Parm, HasGetValueTypeHash)

void UFrontEndRewards_Widget_C::InitInitialRewards(const struct FFrontEndRewards_Definition& Definition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "InitInitialRewards");

	Params::FrontEndRewards_Widget_C_InitInitialRewards Parms{};

	Parms.Definition = std::move(Definition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.HandleChoiceRewardSelected
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RewardIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UFortItem*                        Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFrontEndRewards_Widget_C::HandleChoiceRewardSelected(int32 RewardIndex, class UFortItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "HandleChoiceRewardSelected");

	Params::FrontEndRewards_Widget_C_HandleChoiceRewardSelected Parms{};

	Parms.RewardIndex = RewardIndex;
	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.ClaimQuestChoiceReward
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFortRewardNotificationData*      NotificationData                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SelectionIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UFortItem*                        Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFrontEndRewards_Widget_C::ClaimQuestChoiceReward(class UFortRewardNotificationData* NotificationData, int32 SelectionIndex, class UFortItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "ClaimQuestChoiceReward");

	Params::FrontEndRewards_Widget_C_ClaimQuestChoiceReward Parms{};

	Parms.NotificationData = NotificationData;
	Parms.SelectionIndex = SelectionIndex;
	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.CreateCardsFromItemList
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UFortItem*>                Items                                                  (Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<EFortInventoryType>              ItemInventoryTypeList                                  (Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class URewards_ItemCard_C*>      Cards                                                  (Parm, OutParm, ZeroConstructor)

void UFrontEndRewards_Widget_C::CreateCardsFromItemList(TArray<class UFortItem*>& Items, TArray<EFortInventoryType>& ItemInventoryTypeList, TArray<class URewards_ItemCard_C*>* Cards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "CreateCardsFromItemList");

	Params::FrontEndRewards_Widget_C_CreateCardsFromItemList Parms{};

	Parms.Items = std::move(Items);
	Parms.ItemInventoryTypeList = std::move(ItemInventoryTypeList);

	UObject::ProcessEvent(Func, &Parms);

	Items = std::move(Parms.Items);
	ItemInventoryTypeList = std::move(Parms.ItemInventoryTypeList);

	if (Cards != nullptr)
		*Cards = std::move(Parms.Cards);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.CreateCardsFromItemQuantityList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FFortItemQuantityPair>    Items                                                  (Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class URewards_ItemCard_C*>      Cards                                                  (Parm, OutParm, ZeroConstructor)

void UFrontEndRewards_Widget_C::CreateCardsFromItemQuantityList(TArray<struct FFortItemQuantityPair>& Items, TArray<class URewards_ItemCard_C*>* Cards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "CreateCardsFromItemQuantityList");

	Params::FrontEndRewards_Widget_C_CreateCardsFromItemQuantityList Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);

	Items = std::move(Parms.Items);

	if (Cards != nullptr)
		*Cards = std::move(Parms.Cards);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.CreateCardsFromItemInstanceQuantityList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FFortItemInstanceQuantityPair>Items                                                  (Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class URewards_ItemCard_C*>      Cards                                                  (Parm, OutParm, ZeroConstructor)

void UFrontEndRewards_Widget_C::CreateCardsFromItemInstanceQuantityList(TArray<struct FFortItemInstanceQuantityPair>& Items, TArray<class URewards_ItemCard_C*>* Cards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "CreateCardsFromItemInstanceQuantityList");

	Params::FrontEndRewards_Widget_C_CreateCardsFromItemInstanceQuantityList Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);

	Items = std::move(Parms.Items);

	if (Cards != nullptr)
		*Cards = std::move(Parms.Cards);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.ClaimMissionRewards
// (Public, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::ClaimMissionRewards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "ClaimMissionRewards");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.SetHeaderVisibility
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::SetHeaderVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "SetHeaderVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.PopulateMissionRewards
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::PopulateMissionRewards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "PopulateMissionRewards");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.PopulateQuestRewards
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::PopulateQuestRewards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "PopulateQuestRewards");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.PopulateNewQuest
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::PopulateNewQuest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "PopulateNewQuest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.PopulateExpedition
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::PopulateExpedition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "PopulateExpedition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.PopulateCollectionBookRewards
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::PopulateCollectionBookRewards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "PopulateCollectionBookRewards");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.ClaimQuestListReward
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::ClaimQuestListReward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "ClaimQuestListReward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.ClaimCollectionBookRewards
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::ClaimCollectionBookRewards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "ClaimCollectionBookRewards");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.ClaimCollectionBookChoiceReward
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFortRewardNotificationData*      NotificationData                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SelectionIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UFortItem*                        Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFrontEndRewards_Widget_C::ClaimCollectionBookChoiceReward(class UFortRewardNotificationData* NotificationData, int32 SelectionIndex, class UFortItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "ClaimCollectionBookChoiceReward");

	Params::FrontEndRewards_Widget_C_ClaimCollectionBookChoiceReward Parms{};

	Parms.NotificationData = NotificationData;
	Parms.SelectionIndex = SelectionIndex;
	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.HandleOnQuestRewardsClaimed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFortQuestItem*                   Quest                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FFortItemInstanceQuantityPair>Rewards                                                (Parm, OutParm, ZeroConstructor, ReferenceParm)

void UFrontEndRewards_Widget_C::HandleOnQuestRewardsClaimed(class UFortQuestItem* Quest, TArray<struct FFortItemInstanceQuantityPair>& Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "HandleOnQuestRewardsClaimed");

	Params::FrontEndRewards_Widget_C_HandleOnQuestRewardsClaimed Parms{};

	Parms.Quest = Quest;
	Parms.Rewards = std::move(Rewards);

	UObject::ProcessEvent(Func, &Parms);

	Rewards = std::move(Parms.Rewards);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.HandleOnCollectionBookRewardsClaimed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFortCollectionBookRewards       RewardRequested                                        (Parm)
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<struct FFortItemInstanceQuantityPair>ActualRewards                                          (Parm, OutParm, ZeroConstructor, ReferenceParm)

void UFrontEndRewards_Widget_C::HandleOnCollectionBookRewardsClaimed(const struct FFortCollectionBookRewards& RewardRequested, bool Success, TArray<struct FFortItemInstanceQuantityPair>& ActualRewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "HandleOnCollectionBookRewardsClaimed");

	Params::FrontEndRewards_Widget_C_HandleOnCollectionBookRewardsClaimed Parms{};

	Parms.RewardRequested = std::move(RewardRequested);
	Parms.Success = Success;
	Parms.ActualRewards = std::move(ActualRewards);

	UObject::ProcessEvent(Func, &Parms);

	ActualRewards = std::move(Parms.ActualRewards);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.PopulateListRewardsWidgetFromCardList
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class URewards_ItemCard_C*>      Cards                                                  (Parm, OutParm, ZeroConstructor, ReferenceParm)

void UFrontEndRewards_Widget_C::PopulateListRewardsWidgetFromCardList(TArray<class URewards_ItemCard_C*>& Cards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "PopulateListRewardsWidgetFromCardList");

	Params::FrontEndRewards_Widget_C_PopulateListRewardsWidgetFromCardList Parms{};

	Parms.Cards = std::move(Cards);

	UObject::ProcessEvent(Func, &Parms);

	Cards = std::move(Parms.Cards);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.HandleOnMissionRewardsClaimed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FFortItemInstanceQuantityPair>Rewards                                                (Parm, OutParm, ZeroConstructor, ReferenceParm)

void UFrontEndRewards_Widget_C::HandleOnMissionRewardsClaimed(TArray<struct FFortItemInstanceQuantityPair>& Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "HandleOnMissionRewardsClaimed");

	Params::FrontEndRewards_Widget_C_HandleOnMissionRewardsClaimed Parms{};

	Parms.Rewards = std::move(Rewards);

	UObject::ProcessEvent(Func, &Parms);

	Rewards = std::move(Parms.Rewards);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.InitSubWidgets
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::InitSubWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "InitSubWidgets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.HandleOpenAnimationFinished
// (Public, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::HandleOpenAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "HandleOpenAnimationFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.HandleCurrentRewardTransitionOutComplete
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::HandleCurrentRewardTransitionOutComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "HandleCurrentRewardTransitionOutComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.PopulateChoiceRewardsWidgetFromCardList
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class URewards_ItemCard_C*>      Cards                                                  (Parm, OutParm, ZeroConstructor, ReferenceParm)

void UFrontEndRewards_Widget_C::PopulateChoiceRewardsWidgetFromCardList(TArray<class URewards_ItemCard_C*>& Cards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "PopulateChoiceRewardsWidgetFromCardList");

	Params::FrontEndRewards_Widget_C_PopulateChoiceRewardsWidgetFromCardList Parms{};

	Parms.Cards = std::move(Cards);

	UObject::ProcessEvent(Func, &Parms);

	Cards = std::move(Parms.Cards);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.OpenReward
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::OpenReward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "OpenReward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.TransitionIn
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::TransitionIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "TransitionIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.ResetQueueState
// (Public, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::ResetQueueState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "ResetQueueState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.UnbindEvents
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::UnbindEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "UnbindEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.HandleOnNoRewardsToClaim
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::HandleOnNoRewardsToClaim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "HandleOnNoRewardsToClaim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.PopulateVO
// (Public, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::PopulateVO()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "PopulateVO");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.SkipOpenAnimation
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::SkipOpenAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "SkipOpenAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.SkipPopAnimation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::SkipPopAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "SkipPopAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.HandleBorderShown
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::HandleBorderShown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "HandleBorderShown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.InitAdditionalRewards
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFrontEndRewards_Definition      Definition                                             (Parm, HasGetValueTypeHash)

void UFrontEndRewards_Widget_C::InitAdditionalRewards(const struct FFrontEndRewards_Definition& Definition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "InitAdditionalRewards");

	Params::FrontEndRewards_Widget_C_InitAdditionalRewards Parms{};

	Parms.Definition = std::move(Definition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.InitializeRewardsData
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFrontEndRewards_Definition      FrontEndRewards_Definition                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UFrontEndRewards_Widget_C::InitializeRewardsData(const struct FFrontEndRewards_Definition& FrontEndRewards_Definition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "InitializeRewardsData");

	Params::FrontEndRewards_Widget_C_InitializeRewardsData Parms{};

	Parms.FrontEndRewards_Definition = std::move(FrontEndRewards_Definition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.InitRewardsQueue
// (Private, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::InitRewardsQueue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "InitRewardsQueue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.PopulateMissionAlertRewards
// (Public, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::PopulateMissionAlertRewards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "PopulateMissionAlertRewards");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.ClaimMissionAlertRewards
// (Public, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::ClaimMissionAlertRewards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "ClaimMissionAlertRewards");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.HandleOnMissionAlertRewardsClaimed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FFortItemInstanceQuantityPair>Rewards                                                (Parm, OutParm, ZeroConstructor, ReferenceParm)

void UFrontEndRewards_Widget_C::HandleOnMissionAlertRewardsClaimed(TArray<struct FFortItemInstanceQuantityPair>& Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "HandleOnMissionAlertRewardsClaimed");

	Params::FrontEndRewards_Widget_C_HandleOnMissionAlertRewardsClaimed Parms{};

	Parms.Rewards = std::move(Rewards);

	UObject::ProcessEvent(Func, &Parms);

	Rewards = std::move(Parms.Rewards);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.TriggerUpdateWhenDone
// (Public, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::TriggerUpdateWhenDone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "TriggerUpdateWhenDone");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.SafePop
// (Public, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::SafePop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "SafePop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.DebugPrintChoiceReward
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFrontEndRewards_Widget_C::DebugPrintChoiceReward(const class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "DebugPrintChoiceReward");

	Params::FrontEndRewards_Widget_C_DebugPrintChoiceReward Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FrontEndRewards_Widget.FrontEndRewards_Widget_C.HandleOnMissionRewardsClaimFailed
// (Public, BlueprintCallable, BlueprintEvent)

void UFrontEndRewards_Widget_C::HandleOnMissionRewardsClaimFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontEndRewards_Widget_C", "HandleOnMissionRewardsClaimFailed");

	UObject::ProcessEvent(Func, nullptr);
}

}

