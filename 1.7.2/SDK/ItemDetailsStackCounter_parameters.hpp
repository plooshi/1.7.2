#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemDetailsStackCounter

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function ItemDetailsStackCounter.ItemDetailsStackCounter_C.ExecuteUbergraph_ItemDetailsStackCounter
// 0x0008 (0x0008 - 0x0000)
struct ItemDetailsStackCounter_C_ExecuteUbergraph_ItemDetailsStackCounter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ItemDetailsStackCounter_C_ExecuteUbergraph_ItemDetailsStackCounter) == 0x000004, "Wrong alignment on ItemDetailsStackCounter_C_ExecuteUbergraph_ItemDetailsStackCounter");
static_assert(sizeof(ItemDetailsStackCounter_C_ExecuteUbergraph_ItemDetailsStackCounter) == 0x000008, "Wrong size on ItemDetailsStackCounter_C_ExecuteUbergraph_ItemDetailsStackCounter");
static_assert(offsetof(ItemDetailsStackCounter_C_ExecuteUbergraph_ItemDetailsStackCounter, EntryPoint) == 0x000000, "Member 'ItemDetailsStackCounter_C_ExecuteUbergraph_ItemDetailsStackCounter::EntryPoint' has a wrong offset!");
static_assert(offsetof(ItemDetailsStackCounter_C_ExecuteUbergraph_ItemDetailsStackCounter, K2Node_Event_IsDesignTime) == 0x000004, "Member 'ItemDetailsStackCounter_C_ExecuteUbergraph_ItemDetailsStackCounter::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function ItemDetailsStackCounter.ItemDetailsStackCounter_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ItemDetailsStackCounter_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ItemDetailsStackCounter_C_PreConstruct) == 0x000001, "Wrong alignment on ItemDetailsStackCounter_C_PreConstruct");
static_assert(sizeof(ItemDetailsStackCounter_C_PreConstruct) == 0x000001, "Wrong size on ItemDetailsStackCounter_C_PreConstruct");
static_assert(offsetof(ItemDetailsStackCounter_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ItemDetailsStackCounter_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function ItemDetailsStackCounter.ItemDetailsStackCounter_C.Update
// 0x0008 (0x0008 - 0x0000)
struct ItemDetailsStackCounter_C_Update final
{
public:
	EFortBrushSize                                Brush_Size_0;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ItemDetailsStackCounter_C_Update) == 0x000004, "Wrong alignment on ItemDetailsStackCounter_C_Update");
static_assert(sizeof(ItemDetailsStackCounter_C_Update) == 0x000008, "Wrong size on ItemDetailsStackCounter_C_Update");
static_assert(offsetof(ItemDetailsStackCounter_C_Update, Brush_Size_0) == 0x000000, "Member 'ItemDetailsStackCounter_C_Update::Brush_Size_0' has a wrong offset!");
static_assert(offsetof(ItemDetailsStackCounter_C_Update, Count_0) == 0x000004, "Member 'ItemDetailsStackCounter_C_Update::Count_0' has a wrong offset!");

// Function ItemDetailsStackCounter.ItemDetailsStackCounter_C.Set Stack Count
// 0x0050 (0x0050 - 0x0000)
struct ItemDetailsStackCounter_C_Set_Stack_Count final
{
public:
	int32                                         Count_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
	class FText                                   CallFunc_Truncate_Integer_Value_Formatted_Value;   // 0x0020(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0038(0x0018)()
};
static_assert(alignof(ItemDetailsStackCounter_C_Set_Stack_Count) == 0x000008, "Wrong alignment on ItemDetailsStackCounter_C_Set_Stack_Count");
static_assert(sizeof(ItemDetailsStackCounter_C_Set_Stack_Count) == 0x000050, "Wrong size on ItemDetailsStackCounter_C_Set_Stack_Count");
static_assert(offsetof(ItemDetailsStackCounter_C_Set_Stack_Count, Count_0) == 0x000000, "Member 'ItemDetailsStackCounter_C_Set_Stack_Count::Count_0' has a wrong offset!");
static_assert(offsetof(ItemDetailsStackCounter_C_Set_Stack_Count, Temp_bool_Variable) == 0x000004, "Member 'ItemDetailsStackCounter_C_Set_Stack_Count::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ItemDetailsStackCounter_C_Set_Stack_Count, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'ItemDetailsStackCounter_C_Set_Stack_Count::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemDetailsStackCounter_C_Set_Stack_Count, CallFunc_Truncate_Integer_Value_Formatted_Value) == 0x000020, "Member 'ItemDetailsStackCounter_C_Set_Stack_Count::CallFunc_Truncate_Integer_Value_Formatted_Value' has a wrong offset!");
static_assert(offsetof(ItemDetailsStackCounter_C_Set_Stack_Count, K2Node_Select_Default) == 0x000038, "Member 'ItemDetailsStackCounter_C_Set_Stack_Count::K2Node_Select_Default' has a wrong offset!");

// Function ItemDetailsStackCounter.ItemDetailsStackCounter_C.Refresh Visibility
// 0x0006 (0x0006 - 0x0000)
struct ItemDetailsStackCounter_C_Refresh_Visibility final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ItemDetailsStackCounter_C_Refresh_Visibility) == 0x000001, "Wrong alignment on ItemDetailsStackCounter_C_Refresh_Visibility");
static_assert(sizeof(ItemDetailsStackCounter_C_Refresh_Visibility) == 0x000006, "Wrong size on ItemDetailsStackCounter_C_Refresh_Visibility");
static_assert(offsetof(ItemDetailsStackCounter_C_Refresh_Visibility, Temp_bool_Variable) == 0x000000, "Member 'ItemDetailsStackCounter_C_Refresh_Visibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ItemDetailsStackCounter_C_Refresh_Visibility, Temp_byte_Variable) == 0x000001, "Member 'ItemDetailsStackCounter_C_Refresh_Visibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ItemDetailsStackCounter_C_Refresh_Visibility, Temp_byte_Variable2) == 0x000002, "Member 'ItemDetailsStackCounter_C_Refresh_Visibility::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(ItemDetailsStackCounter_C_Refresh_Visibility, CallFunc_Greater_IntInt_ReturnValue) == 0x000003, "Member 'ItemDetailsStackCounter_C_Refresh_Visibility::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemDetailsStackCounter_C_Refresh_Visibility, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'ItemDetailsStackCounter_C_Refresh_Visibility::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemDetailsStackCounter_C_Refresh_Visibility, K2Node_Select_Default) == 0x000005, "Member 'ItemDetailsStackCounter_C_Refresh_Visibility::K2Node_Select_Default' has a wrong offset!");

}

