#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BluGloManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BluGloManager.BluGloManager_C
// 0x0060 (0x0480 - 0x0420)
class ABluGloManager_C final : public AFortBluGloManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0420(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ATiered_BluGlo_Parent_C*>        PossibleSpawnLocationsArray;                       // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ATiered_BluGlo_Parent_C*>        OccupiedNodes;                                     // 0x0440(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         AmountOfBluGloToSpawn;                             // 0x0450(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_454[0x4];                                      // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 QueryActor;                                        // 0x0458(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnestRequestArraySet;                              // 0x0460(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_461[0x3];                                      // 0x0461(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BluGloNavigablePointRadius;                        // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Reward_Start_Sound;                                // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Reward_Appear_Sound;                               // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LocationLength;                                    // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BluGloSpawnAnimationTime;                          // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BluGloManager(int32 EntryPoint);
	void HandleMissionEvent_RequestBluGloSpawnUseEQS(const struct FGuid& MissionGuid, const struct FGameplayTagContainer& ObjectiveHandle, class UFortMissionEventParams* Params_0, bool DO_NOT_USE_THIS_OR_VARIABLES_BELOW, class UObject* EventFocus, const class UDataAsset* EventContent, class AActor* EventInstigator, int32 GenericInt, float GenericFloat, const class FText& GenericText, const struct FGameplayTagContainer& GameplayTags, const struct FFortMissionEvent& MissionEvent);
	void AddMoreBluGloInWorld(class AFortMission* Mission);
	void SpawnBluGloGroupEvent(const struct FVector& SpawnCenter);
	void SpawnFXComplete(class UParticleSystemComponent* PSystem);
	void OnBluGloQueryFinished(class AActor* ActorToSpawnFrom, const struct FVector& LocationToSpawnFromIfActorInvalid, EEnvQueryStatus QueryStatus, class UEnvQueryInstanceBlueprintWrapper* QueryInstance, int32 NumBluGloToSpawn);
	void StopSpawnFX(bool off);
	void HandleMissionEvent_RequestBluGloSpawnUseActor(const struct FGuid& MissionGuid, const struct FGameplayTagContainer& ObjectiveHandle, class UFortMissionEventParams* Params_0, bool DO_NOT_USE_THIS_OR_VARIABLES_BELOW, class UObject* EventFocus, const class UDataAsset* EventContent, class AActor* EventInstigator, int32 GenericInt, float GenericFloat, const class FText& GenericText, const struct FGameplayTagContainer& GameplayTags, const struct FFortMissionEvent& MissionEvent);
	void UserConstructionScript();
	void RequestedBluGo(class AFortMission* Mission, const struct FVector& EQS_Start_Location, class AActor* Actor);
	void RemoveOccupiedNodes();
	void SpawnBluGlo(const struct FVector& SpawnLocation, const struct FVector& SpawnFromLocation);
	void IssueBluGloRequest(int32 NumBluGloToSpawn, class AActor* ActorToSpawnFrom, const struct FVector& LocationToSpawnFromIfActorInvalid);
	void BuildSpawnLocations(EEnvQueryStatus QueryStatus, class UEnvQueryInstanceBlueprintWrapper* QueryInstance, int32 NumBluGloToSpawn, const struct FVector& SpawnCenter, TArray<struct FVector>* LocationsForSpawningBluGlo);
	void BuildSpawnLocationsFromQueryLocations(int32 NumBluGloToSpawn, TArray<struct FVector>& QueryResultLocations, TArray<struct FVector>* LocationsForSpawningBluGlo);
	void BuildSpawnLocationsRandomly(const struct FVector& LocationToSpawnFrom, int32 NumBluGloToSpawn, TArray<struct FVector>* LocationsForSpawningBluGlo);
	void ChooseSpawnCenter(class AActor* ActorToSpawnFrom, const struct FVector& LocationToSpawnFrom, struct FVector* SpawnCenter);
	void SpawnBluGloGroup(class AActor* ActorToSpawnFrom, const struct FVector& LocationToSpawnFromIfActorInvalid, EEnvQueryStatus QueryStatus, class UEnvQueryInstanceBlueprintWrapper* QueryInstance, int32 NumBluGloToSpawn);
	void StartSpawnFXAndAudio(const struct FVector& SpawnCenter, class UParticleSystemComponent** SpawnFXEmitter);
	void IssueBluGloRequestForMission(class AFortMission* Mission, class AActor* ActorToSpawnBluGloFrom);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BluGloManager_C">();
	}
	static class ABluGloManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABluGloManager_C>();
	}
};
static_assert(alignof(ABluGloManager_C) == 0x000008, "Wrong alignment on ABluGloManager_C");
static_assert(sizeof(ABluGloManager_C) == 0x000480, "Wrong size on ABluGloManager_C");
static_assert(offsetof(ABluGloManager_C, UberGraphFrame) == 0x000420, "Member 'ABluGloManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABluGloManager_C, DefaultSceneRoot) == 0x000428, "Member 'ABluGloManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABluGloManager_C, PossibleSpawnLocationsArray) == 0x000430, "Member 'ABluGloManager_C::PossibleSpawnLocationsArray' has a wrong offset!");
static_assert(offsetof(ABluGloManager_C, OccupiedNodes) == 0x000440, "Member 'ABluGloManager_C::OccupiedNodes' has a wrong offset!");
static_assert(offsetof(ABluGloManager_C, AmountOfBluGloToSpawn) == 0x000450, "Member 'ABluGloManager_C::AmountOfBluGloToSpawn' has a wrong offset!");
static_assert(offsetof(ABluGloManager_C, QueryActor) == 0x000458, "Member 'ABluGloManager_C::QueryActor' has a wrong offset!");
static_assert(offsetof(ABluGloManager_C, OnestRequestArraySet) == 0x000460, "Member 'ABluGloManager_C::OnestRequestArraySet' has a wrong offset!");
static_assert(offsetof(ABluGloManager_C, BluGloNavigablePointRadius) == 0x000464, "Member 'ABluGloManager_C::BluGloNavigablePointRadius' has a wrong offset!");
static_assert(offsetof(ABluGloManager_C, Reward_Start_Sound) == 0x000468, "Member 'ABluGloManager_C::Reward_Start_Sound' has a wrong offset!");
static_assert(offsetof(ABluGloManager_C, Reward_Appear_Sound) == 0x000470, "Member 'ABluGloManager_C::Reward_Appear_Sound' has a wrong offset!");
static_assert(offsetof(ABluGloManager_C, LocationLength) == 0x000478, "Member 'ABluGloManager_C::LocationLength' has a wrong offset!");
static_assert(offsetof(ABluGloManager_C, BluGloSpawnAnimationTime) == 0x00047C, "Member 'ABluGloManager_C::BluGloSpawnAnimationTime' has a wrong offset!");

}

