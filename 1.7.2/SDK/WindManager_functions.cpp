#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WindManager

#include "Basic.hpp"

#include "WindManager_classes.hpp"
#include "WindManager_parameters.hpp"


namespace SDK
{

// Function WindManager.WindManager_C.ExecuteUbergraph_WindManager
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWindManager_C::ExecuteUbergraph_WindManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WindManager_C", "ExecuteUbergraph_WindManager");

	Params::WindManager_C_ExecuteUbergraph_WindManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WindManager.WindManager_C.Register player for render to texture purposes
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerPawn_Generic_C*            Player_Pawn_Generic                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWindManager_C::Register_player_for_render_to_texture_purposes(class APlayerPawn_Generic_C* Player_Pawn_Generic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WindManager_C", "Register player for render to texture purposes");

	Params::WindManager_C_Register_player_for_render_to_texture_purposes Parms{};

	Parms.Player_Pawn_Generic = Player_Pawn_Generic;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WindManager.WindManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWindManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WindManager_C", "ReceiveTick");

	Params::WindManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WindManager.WindManager_C.OnWorldReady
// (Event, Public, BlueprintEvent)

void AWindManager_C::OnWorldReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WindManager_C", "OnWorldReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WindManager.WindManager_C.Add Render To Texture Particle
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UParticleSystem*                  EmitterTemplate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       InTransform                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void AWindManager_C::Add_Render_To_Texture_Particle(class UParticleSystem* EmitterTemplate, const struct FTransform& InTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WindManager_C", "Add Render To Texture Particle");

	Params::WindManager_C_Add_Render_To_Texture_Particle Parms{};

	Parms.EmitterTemplate = EmitterTemplate;
	Parms.InTransform = std::move(InTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WindManager.WindManager_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AWindManager_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WindManager_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WindManager.WindManager_C.InitializeOrthoSettings
// (Public, BlueprintCallable, BlueprintEvent)

void AWindManager_C::InitializeOrthoSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WindManager_C", "InitializeOrthoSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WindManager.WindManager_C.SetRenderOnlyAssets
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              InComponent                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWindManager_C::SetRenderOnlyAssets(class UPrimitiveComponent* InComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WindManager_C", "SetRenderOnlyAssets");

	Params::WindManager_C_SetRenderOnlyAssets Parms{};

	Parms.InComponent = InComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WindManager.WindManager_C.ActivateTestContent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Condition                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AWindManager_C::ActivateTestContent(bool Condition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WindManager_C", "ActivateTestContent");

	Params::WindManager_C_ActivateTestContent Parms{};

	Parms.Condition = Condition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WindManager.WindManager_C.CeilVector
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneCaptureComponent2D*         Scene_Capture                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AWindManager_C::CeilVector(float Scale, class USceneCaptureComponent2D* Scene_Capture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WindManager_C", "CeilVector");

	Params::WindManager_C_CeilVector Parms{};

	Parms.Scale = Scale;
	Parms.Scene_Capture = Scene_Capture;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

