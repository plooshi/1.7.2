#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieScene

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MovieScene.ESpawnOwnership
// NumValues: 0x0004
enum class ESpawnOwnership : uint8
{
	InnerSequence                            = 0,
	MasterSequence                           = 1,
	External                                 = 2,
	ESpawnOwnership_MAX                      = 3,
};

// Enum MovieScene.EMovieSceneKeyInterpolation
// NumValues: 0x0006
enum class EMovieSceneKeyInterpolation : uint8
{
	Auto                                     = 0,
	User                                     = 1,
	Break                                    = 2,
	Linear                                   = 3,
	Constant                                 = 4,
	EMovieSceneKeyInterpolation_MAX          = 5,
};

// Enum MovieScene.EMovieSceneCompletionMode
// NumValues: 0x0003
enum class EMovieSceneCompletionMode : uint8
{
	KeepState                                = 0,
	RestoreState                             = 1,
	EMovieSceneCompletionMode_MAX            = 2,
};

// Enum MovieScene.EEvaluationMethod
// NumValues: 0x0003
enum class EEvaluationMethod : uint8
{
	Static                                   = 0,
	Swept                                    = 1,
	EEvaluationMethod_MAX                    = 2,
};

// ScriptStruct MovieScene.MovieSceneBinding
// 0x0030 (0x0030 - 0x0000)
struct FMovieSceneBinding final
{
public:
	struct FGuid                                  ObjectGuid;                                        // 0x0000(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 BindingName;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMovieSceneTrack*>               Tracks;                                            // 0x0020(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneBinding) == 0x000008, "Wrong alignment on FMovieSceneBinding");
static_assert(sizeof(FMovieSceneBinding) == 0x000030, "Wrong size on FMovieSceneBinding");
static_assert(offsetof(FMovieSceneBinding, ObjectGuid) == 0x000000, "Member 'FMovieSceneBinding::ObjectGuid' has a wrong offset!");
static_assert(offsetof(FMovieSceneBinding, BindingName) == 0x000010, "Member 'FMovieSceneBinding::BindingName' has a wrong offset!");
static_assert(offsetof(FMovieSceneBinding, Tracks) == 0x000020, "Member 'FMovieSceneBinding::Tracks' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSpawnable
// 0x0040 (0x0040 - 0x0000)
struct FMovieSceneSpawnable final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Name;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                                ObjectTemplate;                                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FGuid>                          ChildPossessables;                                 // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	ESpawnOwnership                               Ownership;                                         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneSpawnable) == 0x000008, "Wrong alignment on FMovieSceneSpawnable");
static_assert(sizeof(FMovieSceneSpawnable) == 0x000040, "Wrong size on FMovieSceneSpawnable");
static_assert(offsetof(FMovieSceneSpawnable, Guid) == 0x000000, "Member 'FMovieSceneSpawnable::Guid' has a wrong offset!");
static_assert(offsetof(FMovieSceneSpawnable, Name) == 0x000010, "Member 'FMovieSceneSpawnable::Name' has a wrong offset!");
static_assert(offsetof(FMovieSceneSpawnable, ObjectTemplate) == 0x000020, "Member 'FMovieSceneSpawnable::ObjectTemplate' has a wrong offset!");
static_assert(offsetof(FMovieSceneSpawnable, ChildPossessables) == 0x000028, "Member 'FMovieSceneSpawnable::ChildPossessables' has a wrong offset!");
static_assert(offsetof(FMovieSceneSpawnable, Ownership) == 0x000038, "Member 'FMovieSceneSpawnable::Ownership' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneObjectBindingPtr
// 0x0010 (0x0010 - 0x0000)
struct FMovieSceneObjectBindingPtr final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneObjectBindingPtr) == 0x000004, "Wrong alignment on FMovieSceneObjectBindingPtr");
static_assert(sizeof(FMovieSceneObjectBindingPtr) == 0x000010, "Wrong size on FMovieSceneObjectBindingPtr");
static_assert(offsetof(FMovieSceneObjectBindingPtr, Guid) == 0x000000, "Member 'FMovieSceneObjectBindingPtr::Guid' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneTrackImplementationPtr
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FMovieSceneTrackImplementationPtr final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneTrackImplementationPtr) == 0x000008, "Wrong alignment on FMovieSceneTrackImplementationPtr");
static_assert(sizeof(FMovieSceneTrackImplementationPtr) == 0x000038, "Wrong size on FMovieSceneTrackImplementationPtr");

// ScriptStruct MovieScene.MovieSceneExpansionState
// 0x0001 (0x0001 - 0x0000)
struct FMovieSceneExpansionState final
{
public:
	bool                                          bExpanded;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneExpansionState) == 0x000001, "Wrong alignment on FMovieSceneExpansionState");
static_assert(sizeof(FMovieSceneExpansionState) == 0x000001, "Wrong size on FMovieSceneExpansionState");
static_assert(offsetof(FMovieSceneExpansionState, bExpanded) == 0x000000, "Member 'FMovieSceneExpansionState::bExpanded' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEditorData
// 0x0070 (0x0070 - 0x0000)
struct FMovieSceneEditorData final
{
public:
	TMap<class FString, struct FMovieSceneExpansionState> ExpansionStates;                                   // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFloatRange                            WorkingRange;                                      // 0x0050(0x0010)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            ViewRange;                                         // 0x0060(0x0010)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEditorData) == 0x000008, "Wrong alignment on FMovieSceneEditorData");
static_assert(sizeof(FMovieSceneEditorData) == 0x000070, "Wrong size on FMovieSceneEditorData");
static_assert(offsetof(FMovieSceneEditorData, ExpansionStates) == 0x000000, "Member 'FMovieSceneEditorData::ExpansionStates' has a wrong offset!");
static_assert(offsetof(FMovieSceneEditorData, WorkingRange) == 0x000050, "Member 'FMovieSceneEditorData::WorkingRange' has a wrong offset!");
static_assert(offsetof(FMovieSceneEditorData, ViewRange) == 0x000060, "Member 'FMovieSceneEditorData::ViewRange' has a wrong offset!");

// ScriptStruct MovieScene.MovieScenePropertySectionData
// 0x0020 (0x0020 - 0x0000)
struct FMovieScenePropertySectionData final
{
public:
	class FName                                   PropertyName;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 PropertyPath;                                      // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FunctionName;                                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieScenePropertySectionData) == 0x000008, "Wrong alignment on FMovieScenePropertySectionData");
static_assert(sizeof(FMovieScenePropertySectionData) == 0x000020, "Wrong size on FMovieScenePropertySectionData");
static_assert(offsetof(FMovieScenePropertySectionData, PropertyName) == 0x000000, "Member 'FMovieScenePropertySectionData::PropertyName' has a wrong offset!");
static_assert(offsetof(FMovieScenePropertySectionData, PropertyPath) == 0x000008, "Member 'FMovieScenePropertySectionData::PropertyPath' has a wrong offset!");
static_assert(offsetof(FMovieScenePropertySectionData, FunctionName) == 0x000018, "Member 'FMovieScenePropertySectionData::FunctionName' has a wrong offset!");

// ScriptStruct MovieScene.MovieScenePossessable
// 0x0038 (0x0038 - 0x0000)
struct FMovieScenePossessable final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Name;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UClass*                                 PossessedObjectClass;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  ParentGuid;                                        // 0x0028(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieScenePossessable) == 0x000008, "Wrong alignment on FMovieScenePossessable");
static_assert(sizeof(FMovieScenePossessable) == 0x000038, "Wrong size on FMovieScenePossessable");
static_assert(offsetof(FMovieScenePossessable, Guid) == 0x000000, "Member 'FMovieScenePossessable::Guid' has a wrong offset!");
static_assert(offsetof(FMovieScenePossessable, Name) == 0x000010, "Member 'FMovieScenePossessable::Name' has a wrong offset!");
static_assert(offsetof(FMovieScenePossessable, PossessedObjectClass) == 0x000020, "Member 'FMovieScenePossessable::PossessedObjectClass' has a wrong offset!");
static_assert(offsetof(FMovieScenePossessable, ParentGuid) == 0x000028, "Member 'FMovieScenePossessable::ParentGuid' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSegment
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FMovieSceneSegment final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneSegment) == 0x000008, "Wrong alignment on FMovieSceneSegment");
static_assert(sizeof(FMovieSceneSegment) == 0x000040, "Wrong size on FMovieSceneSegment");

// ScriptStruct MovieScene.MovieSceneEvalTemplatePtr
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FMovieSceneEvalTemplatePtr final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvalTemplatePtr) == 0x000008, "Wrong alignment on FMovieSceneEvalTemplatePtr");
static_assert(sizeof(FMovieSceneEvalTemplatePtr) == 0x000038, "Wrong size on FMovieSceneEvalTemplatePtr");

// ScriptStruct MovieScene.MovieSceneEvaluationTrack
// 0x0080 (0x0080 - 0x0000)
struct FMovieSceneEvaluationTrack final
{
public:
	struct FGuid                                  ObjectBindingId;                                   // 0x0000(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint16                                        EvaluationPriority;                                // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EEvaluationMethod                             EvaluationMethod;                                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneSegment>             Segments;                                          // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FMovieSceneEvalTemplatePtr>     ChildTemplates;                                    // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FMovieSceneTrackImplementationPtr      TrackTemplate;                                     // 0x0038(0x0038)(NativeAccessSpecifierPrivate)
	class FName                                   EvaluationGroup;                                   // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bEvaluateInPreroll : 1;                            // 0x0078(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bEvaluateInPostroll : 1;                           // 0x0078(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvaluationTrack) == 0x000008, "Wrong alignment on FMovieSceneEvaluationTrack");
static_assert(sizeof(FMovieSceneEvaluationTrack) == 0x000080, "Wrong size on FMovieSceneEvaluationTrack");
static_assert(offsetof(FMovieSceneEvaluationTrack, ObjectBindingId) == 0x000000, "Member 'FMovieSceneEvaluationTrack::ObjectBindingId' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTrack, EvaluationPriority) == 0x000010, "Member 'FMovieSceneEvaluationTrack::EvaluationPriority' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTrack, EvaluationMethod) == 0x000012, "Member 'FMovieSceneEvaluationTrack::EvaluationMethod' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTrack, Segments) == 0x000018, "Member 'FMovieSceneEvaluationTrack::Segments' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTrack, ChildTemplates) == 0x000028, "Member 'FMovieSceneEvaluationTrack::ChildTemplates' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTrack, TrackTemplate) == 0x000038, "Member 'FMovieSceneEvaluationTrack::TrackTemplate' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTrack, EvaluationGroup) == 0x000070, "Member 'FMovieSceneEvaluationTrack::EvaluationGroup' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequenceID
// 0x0004 (0x0004 - 0x0000)
struct FMovieSceneSequenceID final
{
public:
	uint32                                        Value;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneSequenceID) == 0x000004, "Wrong alignment on FMovieSceneSequenceID");
static_assert(sizeof(FMovieSceneSequenceID) == 0x000004, "Wrong size on FMovieSceneSequenceID");
static_assert(offsetof(FMovieSceneSequenceID, Value) == 0x000000, "Member 'FMovieSceneSequenceID::Value' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationMetaData
// 0x0010 (0x0010 - 0x0000)
struct FMovieSceneEvaluationMetaData final
{
public:
	TArray<struct FMovieSceneSequenceID>          ActiveSequences;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEvaluationMetaData) == 0x000008, "Wrong alignment on FMovieSceneEvaluationMetaData");
static_assert(sizeof(FMovieSceneEvaluationMetaData) == 0x000010, "Wrong size on FMovieSceneEvaluationMetaData");
static_assert(offsetof(FMovieSceneEvaluationMetaData, ActiveSequences) == 0x000000, "Member 'FMovieSceneEvaluationMetaData::ActiveSequences' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationGroupLUTIndex
// 0x0010 (0x0010 - 0x0000)
struct FMovieSceneEvaluationGroupLUTIndex final
{
public:
	bool                                          bRequiresImmediateFlush;                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LUTOffset;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumInitPtrs;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEvalPtrs;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEvaluationGroupLUTIndex) == 0x000004, "Wrong alignment on FMovieSceneEvaluationGroupLUTIndex");
static_assert(sizeof(FMovieSceneEvaluationGroupLUTIndex) == 0x000010, "Wrong size on FMovieSceneEvaluationGroupLUTIndex");
static_assert(offsetof(FMovieSceneEvaluationGroupLUTIndex, bRequiresImmediateFlush) == 0x000000, "Member 'FMovieSceneEvaluationGroupLUTIndex::bRequiresImmediateFlush' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationGroupLUTIndex, LUTOffset) == 0x000004, "Member 'FMovieSceneEvaluationGroupLUTIndex::LUTOffset' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationGroupLUTIndex, NumInitPtrs) == 0x000008, "Member 'FMovieSceneEvaluationGroupLUTIndex::NumInitPtrs' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationGroupLUTIndex, NumEvalPtrs) == 0x00000C, "Member 'FMovieSceneEvaluationGroupLUTIndex::NumEvalPtrs' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneTrackIdentifier
// 0x0004 (0x0004 - 0x0000)
struct FMovieSceneTrackIdentifier final
{
public:
	uint32                                        Value;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneTrackIdentifier) == 0x000004, "Wrong alignment on FMovieSceneTrackIdentifier");
static_assert(sizeof(FMovieSceneTrackIdentifier) == 0x000004, "Wrong size on FMovieSceneTrackIdentifier");
static_assert(offsetof(FMovieSceneTrackIdentifier, Value) == 0x000000, "Member 'FMovieSceneTrackIdentifier::Value' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationFieldTrackPtr
// 0x0008 (0x0008 - 0x0000)
struct FMovieSceneEvaluationFieldTrackPtr
{
public:
	struct FMovieSceneSequenceID                  SequenceID;                                        // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneTrackIdentifier             TrackIdentifier;                                   // 0x0004(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEvaluationFieldTrackPtr) == 0x000004, "Wrong alignment on FMovieSceneEvaluationFieldTrackPtr");
static_assert(sizeof(FMovieSceneEvaluationFieldTrackPtr) == 0x000008, "Wrong size on FMovieSceneEvaluationFieldTrackPtr");
static_assert(offsetof(FMovieSceneEvaluationFieldTrackPtr, SequenceID) == 0x000000, "Member 'FMovieSceneEvaluationFieldTrackPtr::SequenceID' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier) == 0x000004, "Member 'FMovieSceneEvaluationFieldTrackPtr::TrackIdentifier' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationFieldSegmentPtr
// 0x0004 (0x000C - 0x0008)
struct FMovieSceneEvaluationFieldSegmentPtr final : public FMovieSceneEvaluationFieldTrackPtr
{
public:
	int32                                         SegmentIndex;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEvaluationFieldSegmentPtr) == 0x000004, "Wrong alignment on FMovieSceneEvaluationFieldSegmentPtr");
static_assert(sizeof(FMovieSceneEvaluationFieldSegmentPtr) == 0x00000C, "Wrong size on FMovieSceneEvaluationFieldSegmentPtr");
static_assert(offsetof(FMovieSceneEvaluationFieldSegmentPtr, SegmentIndex) == 0x000008, "Member 'FMovieSceneEvaluationFieldSegmentPtr::SegmentIndex' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationGroup
// 0x0020 (0x0020 - 0x0000)
struct FMovieSceneEvaluationGroup final
{
public:
	TArray<struct FMovieSceneEvaluationGroupLUTIndex> LUTIndices;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneEvaluationFieldSegmentPtr> SegmentPtrLUT;                                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEvaluationGroup) == 0x000008, "Wrong alignment on FMovieSceneEvaluationGroup");
static_assert(sizeof(FMovieSceneEvaluationGroup) == 0x000020, "Wrong size on FMovieSceneEvaluationGroup");
static_assert(offsetof(FMovieSceneEvaluationGroup, LUTIndices) == 0x000000, "Member 'FMovieSceneEvaluationGroup::LUTIndices' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationGroup, SegmentPtrLUT) == 0x000010, "Member 'FMovieSceneEvaluationGroup::SegmentPtrLUT' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationField
// 0x0030 (0x0030 - 0x0000)
struct FMovieSceneEvaluationField final
{
public:
	TArray<struct FFloatRange>                    Ranges;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneEvaluationGroup>     Groups;                                            // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneEvaluationMetaData>  MetaData;                                          // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEvaluationField) == 0x000008, "Wrong alignment on FMovieSceneEvaluationField");
static_assert(sizeof(FMovieSceneEvaluationField) == 0x000030, "Wrong size on FMovieSceneEvaluationField");
static_assert(offsetof(FMovieSceneEvaluationField, Ranges) == 0x000000, "Member 'FMovieSceneEvaluationField::Ranges' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationField, Groups) == 0x000010, "Member 'FMovieSceneEvaluationField::Groups' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationField, MetaData) == 0x000020, "Member 'FMovieSceneEvaluationField::MetaData' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneGenerationLedger
// 0x00A8 (0x00A8 - 0x0000)
struct alignas(0x08) FMovieSceneGenerationLedger final
{
public:
	struct FMovieSceneTrackIdentifier             LastTrackIdentifier;                               // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xA4];                                       // 0x0004(0x00A4)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneGenerationLedger) == 0x000008, "Wrong alignment on FMovieSceneGenerationLedger");
static_assert(sizeof(FMovieSceneGenerationLedger) == 0x0000A8, "Wrong size on FMovieSceneGenerationLedger");
static_assert(offsetof(FMovieSceneGenerationLedger, LastTrackIdentifier) == 0x000000, "Member 'FMovieSceneGenerationLedger::LastTrackIdentifier' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequenceTransform
// 0x0008 (0x0008 - 0x0000)
struct FMovieSceneSequenceTransform final
{
public:
	float                                         TimeScale;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offset;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneSequenceTransform) == 0x000004, "Wrong alignment on FMovieSceneSequenceTransform");
static_assert(sizeof(FMovieSceneSequenceTransform) == 0x000008, "Wrong size on FMovieSceneSequenceTransform");
static_assert(offsetof(FMovieSceneSequenceTransform, TimeScale) == 0x000000, "Member 'FMovieSceneSequenceTransform::TimeScale' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequenceTransform, Offset) == 0x000004, "Member 'FMovieSceneSequenceTransform::Offset' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSubSequenceData
// 0x0028 (0x0028 - 0x0000)
struct FMovieSceneSubSequenceData final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneSequenceTransform           RootToSequenceTransform;                           // 0x0008(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FGuid                                  SourceSequenceSignature;                           // 0x0010(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneSequenceID                  DeterministicSequenceID;                           // 0x0020(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneSubSequenceData) == 0x000008, "Wrong alignment on FMovieSceneSubSequenceData");
static_assert(sizeof(FMovieSceneSubSequenceData) == 0x000028, "Wrong size on FMovieSceneSubSequenceData");
static_assert(offsetof(FMovieSceneSubSequenceData, Sequence) == 0x000000, "Member 'FMovieSceneSubSequenceData::Sequence' has a wrong offset!");
static_assert(offsetof(FMovieSceneSubSequenceData, RootToSequenceTransform) == 0x000008, "Member 'FMovieSceneSubSequenceData::RootToSequenceTransform' has a wrong offset!");
static_assert(offsetof(FMovieSceneSubSequenceData, SourceSequenceSignature) == 0x000010, "Member 'FMovieSceneSubSequenceData::SourceSequenceSignature' has a wrong offset!");
static_assert(offsetof(FMovieSceneSubSequenceData, DeterministicSequenceID) == 0x000020, "Member 'FMovieSceneSubSequenceData::DeterministicSequenceID' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequenceHierarchyNode
// 0x0018 (0x0018 - 0x0000)
struct FMovieSceneSequenceHierarchyNode final
{
public:
	struct FMovieSceneSequenceID                  ParentID;                                          // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneSequenceID>          Children;                                          // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneSequenceHierarchyNode) == 0x000008, "Wrong alignment on FMovieSceneSequenceHierarchyNode");
static_assert(sizeof(FMovieSceneSequenceHierarchyNode) == 0x000018, "Wrong size on FMovieSceneSequenceHierarchyNode");
static_assert(offsetof(FMovieSceneSequenceHierarchyNode, ParentID) == 0x000000, "Member 'FMovieSceneSequenceHierarchyNode::ParentID' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequenceHierarchyNode, Children) == 0x000008, "Member 'FMovieSceneSequenceHierarchyNode::Children' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequenceHierarchy
// 0x00A0 (0x00A0 - 0x0000)
struct FMovieSceneSequenceHierarchy final
{
public:
	TMap<uint32, struct FMovieSceneSubSequenceData> SubSequences;                                      // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<uint32, struct FMovieSceneSequenceHierarchyNode> Hierarchy;                                         // 0x0050(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneSequenceHierarchy) == 0x000008, "Wrong alignment on FMovieSceneSequenceHierarchy");
static_assert(sizeof(FMovieSceneSequenceHierarchy) == 0x0000A0, "Wrong size on FMovieSceneSequenceHierarchy");
static_assert(offsetof(FMovieSceneSequenceHierarchy, SubSequences) == 0x000000, "Member 'FMovieSceneSequenceHierarchy::SubSequences' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequenceHierarchy, Hierarchy) == 0x000050, "Member 'FMovieSceneSequenceHierarchy::Hierarchy' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationTemplate
// 0x0220 (0x0220 - 0x0000)
struct FMovieSceneEvaluationTemplate
{
public:
	TMap<uint32, struct FMovieSceneEvaluationTrack> Tracks;                                            // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_50[0x50];                                      // 0x0050(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvaluationField             EvaluationField;                                   // 0x00A0(0x0030)(NativeAccessSpecifierPublic)
	struct FMovieSceneSequenceHierarchy           Hierarchy;                                         // 0x00D0(0x00A0)(NativeAccessSpecifierPublic)
	struct FMovieSceneGenerationLedger            Ledger;                                            // 0x0170(0x00A8)(NativeAccessSpecifierPrivate)
	uint8                                         bHasLegacyTrackInstances : 1;                      // 0x0218(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bKeepStaleTracks : 1;                              // 0x0218(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvaluationTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvaluationTemplate");
static_assert(sizeof(FMovieSceneEvaluationTemplate) == 0x000220, "Wrong size on FMovieSceneEvaluationTemplate");
static_assert(offsetof(FMovieSceneEvaluationTemplate, Tracks) == 0x000000, "Member 'FMovieSceneEvaluationTemplate::Tracks' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTemplate, EvaluationField) == 0x0000A0, "Member 'FMovieSceneEvaluationTemplate::EvaluationField' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTemplate, Hierarchy) == 0x0000D0, "Member 'FMovieSceneEvaluationTemplate::Hierarchy' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvaluationTemplate, Ledger) == 0x000170, "Member 'FMovieSceneEvaluationTemplate::Ledger' has a wrong offset!");

// ScriptStruct MovieScene.CachedMovieSceneEvaluationTemplate
// 0x0000 (0x0220 - 0x0220)
struct FCachedMovieSceneEvaluationTemplate final : public FMovieSceneEvaluationTemplate
{
};
static_assert(alignof(FCachedMovieSceneEvaluationTemplate) == 0x000008, "Wrong alignment on FCachedMovieSceneEvaluationTemplate");
static_assert(sizeof(FCachedMovieSceneEvaluationTemplate) == 0x000220, "Wrong size on FCachedMovieSceneEvaluationTemplate");

// ScriptStruct MovieScene.MovieSceneTrackLabels
// 0x0010 (0x0010 - 0x0000)
struct FMovieSceneTrackLabels final
{
public:
	TArray<class FString>                         Strings;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneTrackLabels) == 0x000008, "Wrong alignment on FMovieSceneTrackLabels");
static_assert(sizeof(FMovieSceneTrackLabels) == 0x000010, "Wrong size on FMovieSceneTrackLabels");
static_assert(offsetof(FMovieSceneTrackLabels, Strings) == 0x000000, "Member 'FMovieSceneTrackLabels::Strings' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneBindingOverrideData
// 0x001C (0x001C - 0x0000)
struct FMovieSceneBindingOverrideData final
{
public:
	struct FMovieSceneObjectBindingPtr            ObjectBindingId;                                   // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UObject>                 Object;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverridesDefault;                                 // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneBindingOverrideData) == 0x000004, "Wrong alignment on FMovieSceneBindingOverrideData");
static_assert(sizeof(FMovieSceneBindingOverrideData) == 0x00001C, "Wrong size on FMovieSceneBindingOverrideData");
static_assert(offsetof(FMovieSceneBindingOverrideData, ObjectBindingId) == 0x000000, "Member 'FMovieSceneBindingOverrideData::ObjectBindingId' has a wrong offset!");
static_assert(offsetof(FMovieSceneBindingOverrideData, Object) == 0x000010, "Member 'FMovieSceneBindingOverrideData::Object' has a wrong offset!");
static_assert(offsetof(FMovieSceneBindingOverrideData, bOverridesDefault) == 0x000018, "Member 'FMovieSceneBindingOverrideData::bOverridesDefault' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequencePlaybackSettings
// 0x0028 (0x0028 - 0x0000)
struct FMovieSceneSequencePlaybackSettings final
{
public:
	int32                                         LoopCount;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomStartTime;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoreState;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IMovieSceneBindingOverridesInterface> BindingOverrides;                                  // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneSequencePlaybackSettings) == 0x000008, "Wrong alignment on FMovieSceneSequencePlaybackSettings");
static_assert(sizeof(FMovieSceneSequencePlaybackSettings) == 0x000028, "Wrong size on FMovieSceneSequencePlaybackSettings");
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, LoopCount) == 0x000000, "Member 'FMovieSceneSequencePlaybackSettings::LoopCount' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, PlayRate) == 0x000004, "Member 'FMovieSceneSequencePlaybackSettings::PlayRate' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, bRandomStartTime) == 0x000008, "Member 'FMovieSceneSequencePlaybackSettings::bRandomStartTime' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, StartTime) == 0x00000C, "Member 'FMovieSceneSequencePlaybackSettings::StartTime' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, bRestoreState) == 0x000010, "Member 'FMovieSceneSequencePlaybackSettings::bRestoreState' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, BindingOverrides) == 0x000018, "Member 'FMovieSceneSequencePlaybackSettings::BindingOverrides' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSectionEvalOptions
// 0x0002 (0x0002 - 0x0000)
struct FMovieSceneSectionEvalOptions final
{
public:
	bool                                          bCanEditCompletionMode;                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieSceneCompletionMode                     CompletionMode;                                    // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneSectionEvalOptions) == 0x000001, "Wrong alignment on FMovieSceneSectionEvalOptions");
static_assert(sizeof(FMovieSceneSectionEvalOptions) == 0x000002, "Wrong size on FMovieSceneSectionEvalOptions");
static_assert(offsetof(FMovieSceneSectionEvalOptions, bCanEditCompletionMode) == 0x000000, "Member 'FMovieSceneSectionEvalOptions::bCanEditCompletionMode' has a wrong offset!");
static_assert(offsetof(FMovieSceneSectionEvalOptions, CompletionMode) == 0x000001, "Member 'FMovieSceneSectionEvalOptions::CompletionMode' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneTrackEvalOptions
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FMovieSceneTrackEvalOptions final
{
public:
	uint8                                         bCanEvaluateNearestSection : 1;                    // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvaluateNearestSection : 1;                       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvaluateInPreroll : 1;                            // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvaluateInPostroll : 1;                           // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneTrackEvalOptions) == 0x000004, "Wrong alignment on FMovieSceneTrackEvalOptions");
static_assert(sizeof(FMovieSceneTrackEvalOptions) == 0x000004, "Wrong size on FMovieSceneTrackEvalOptions");

// ScriptStruct MovieScene.MovieSceneTrackCompilationParams
// 0x0001 (0x0001 - 0x0000)
struct FMovieSceneTrackCompilationParams final
{
public:
	bool                                          bForEditorPreview;                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneTrackCompilationParams) == 0x000001, "Wrong alignment on FMovieSceneTrackCompilationParams");
static_assert(sizeof(FMovieSceneTrackCompilationParams) == 0x000001, "Wrong size on FMovieSceneTrackCompilationParams");
static_assert(offsetof(FMovieSceneTrackCompilationParams, bForEditorPreview) == 0x000000, "Member 'FMovieSceneTrackCompilationParams::bForEditorPreview' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvalTemplateBase
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FMovieSceneEvalTemplateBase
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvalTemplateBase) == 0x000008, "Wrong alignment on FMovieSceneEvalTemplateBase");
static_assert(sizeof(FMovieSceneEvalTemplateBase) == 0x000010, "Wrong size on FMovieSceneEvalTemplateBase");

// ScriptStruct MovieScene.MovieSceneEvalTemplate
// 0x0008 (0x0018 - 0x0010)
struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
{
public:
	EMovieSceneCompletionMode                     CompletionMode;                                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvalTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvalTemplate");
static_assert(sizeof(FMovieSceneEvalTemplate) == 0x000018, "Wrong size on FMovieSceneEvalTemplate");
static_assert(offsetof(FMovieSceneEvalTemplate, CompletionMode) == 0x000010, "Member 'FMovieSceneEvalTemplate::CompletionMode' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneLegacyTrackInstanceTemplate
// 0x0008 (0x0020 - 0x0018)
struct FMovieSceneLegacyTrackInstanceTemplate final : public FMovieSceneEvalTemplate
{
public:
	class UMovieSceneTrack*                       Track;                                             // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneLegacyTrackInstanceTemplate) == 0x000008, "Wrong alignment on FMovieSceneLegacyTrackInstanceTemplate");
static_assert(sizeof(FMovieSceneLegacyTrackInstanceTemplate) == 0x000020, "Wrong size on FMovieSceneLegacyTrackInstanceTemplate");
static_assert(offsetof(FMovieSceneLegacyTrackInstanceTemplate, Track) == 0x000018, "Member 'FMovieSceneLegacyTrackInstanceTemplate::Track' has a wrong offset!");

// ScriptStruct MovieScene.SectionEvaluationData
// 0x0008 (0x0008 - 0x0000)
struct FSectionEvaluationData final
{
public:
	int32                                         ImplIndex;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForcedTime;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSectionEvaluationData) == 0x000004, "Wrong alignment on FSectionEvaluationData");
static_assert(sizeof(FSectionEvaluationData) == 0x000008, "Wrong size on FSectionEvaluationData");
static_assert(offsetof(FSectionEvaluationData, ImplIndex) == 0x000000, "Member 'FSectionEvaluationData::ImplIndex' has a wrong offset!");
static_assert(offsetof(FSectionEvaluationData, ForcedTime) == 0x000004, "Member 'FSectionEvaluationData::ForcedTime' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEmptyStruct
// 0x0001 (0x0001 - 0x0000)
struct FMovieSceneEmptyStruct final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEmptyStruct) == 0x000001, "Wrong alignment on FMovieSceneEmptyStruct");
static_assert(sizeof(FMovieSceneEmptyStruct) == 0x000001, "Wrong size on FMovieSceneEmptyStruct");

// ScriptStruct MovieScene.MovieSceneKeyStruct
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FMovieSceneKeyStruct
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneKeyStruct) == 0x000008, "Wrong alignment on FMovieSceneKeyStruct");
static_assert(sizeof(FMovieSceneKeyStruct) == 0x000008, "Wrong size on FMovieSceneKeyStruct");

// ScriptStruct MovieScene.MovieSceneTrackImplementation
// 0x0000 (0x0010 - 0x0010)
struct FMovieSceneTrackImplementation final : public FMovieSceneEvalTemplateBase
{
};
static_assert(alignof(FMovieSceneTrackImplementation) == 0x000008, "Wrong alignment on FMovieSceneTrackImplementation");
static_assert(sizeof(FMovieSceneTrackImplementation) == 0x000010, "Wrong size on FMovieSceneTrackImplementation");

// ScriptStruct MovieScene.MovieSceneSectionParameters
// 0x0010 (0x0010 - 0x0000)
struct FMovieSceneSectionParameters final
{
public:
	float                                         StartOffset;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrerollTime;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostrollTime;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneSectionParameters) == 0x000004, "Wrong alignment on FMovieSceneSectionParameters");
static_assert(sizeof(FMovieSceneSectionParameters) == 0x000010, "Wrong size on FMovieSceneSectionParameters");
static_assert(offsetof(FMovieSceneSectionParameters, StartOffset) == 0x000000, "Member 'FMovieSceneSectionParameters::StartOffset' has a wrong offset!");
static_assert(offsetof(FMovieSceneSectionParameters, TimeScale) == 0x000004, "Member 'FMovieSceneSectionParameters::TimeScale' has a wrong offset!");
static_assert(offsetof(FMovieSceneSectionParameters, PrerollTime) == 0x000008, "Member 'FMovieSceneSectionParameters::PrerollTime' has a wrong offset!");
static_assert(offsetof(FMovieSceneSectionParameters, PostrollTime) == 0x00000C, "Member 'FMovieSceneSectionParameters::PostrollTime' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequenceCachedSignature
// 0x0018 (0x0018 - 0x0000)
struct FMovieSceneSequenceCachedSignature final
{
public:
	TWeakObjectPtr<class UMovieSceneSequence>     Sequence;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CachedSignature;                                   // 0x0008(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneSequenceCachedSignature) == 0x000004, "Wrong alignment on FMovieSceneSequenceCachedSignature");
static_assert(sizeof(FMovieSceneSequenceCachedSignature) == 0x000018, "Wrong size on FMovieSceneSequenceCachedSignature");
static_assert(offsetof(FMovieSceneSequenceCachedSignature, Sequence) == 0x000000, "Member 'FMovieSceneSequenceCachedSignature::Sequence' has a wrong offset!");
static_assert(offsetof(FMovieSceneSequenceCachedSignature, CachedSignature) == 0x000008, "Member 'FMovieSceneSequenceCachedSignature::CachedSignature' has a wrong offset!");

}

